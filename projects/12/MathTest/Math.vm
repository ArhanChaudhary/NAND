function Math.init 2
push constant 16
call Array.new 1
pop static 0
push constant 1
pop local 0
label WHILE_ITER0
push local 1
push constant 15
gt
if-goto WHILE_BREAKER1
push static 0
push local 1
add
push local 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push local 0
add
pop local 0
push local 1
push constant 1
add
pop local 1
goto WHILE_ITER0
label WHILE_BREAKER1
push constant 16
call Array.new 1
pop static 1
push constant 0
return
function Math.getMasks 0
push static 0
return
function Math.abs 0
push argument 0
push constant 0
gt
if-goto FALSE_CASE2
push argument 0
neg
return
label FALSE_CASE2
push argument 0
return
function Math.multiply 3
push argument 0
pop local 2
label WHILE_ITER3
push local 0
push constant 15
gt
if-goto WHILE_BREAKER4
push argument 1
push static 0
push local 0
add
pop pointer 1
push that 0
and
push constant 0
eq
if-goto FALSE_CASE5
push local 1
push local 2
add
pop local 1
label FALSE_CASE5
push local 2
push local 2
add
pop local 2
push local 0
push constant 1
add
pop local 0
goto WHILE_ITER3
label WHILE_BREAKER4
push local 1
return
function Math.divide 5
push argument 1
push constant 0
eq
not
if-goto FALSE_CASE6
push constant 3
call Sys.error 1
pop temp 0
label FALSE_CASE6
push argument 0
push constant 0
lt
pop local 2
push argument 1
push constant 0
lt
pop local 3
push local 2
not
if-goto FALSE_CASE7
push argument 0
neg
pop argument 0
label FALSE_CASE7
push local 3
not
if-goto FALSE_CASE8
push argument 1
neg
pop argument 1
label FALSE_CASE8
push static 1
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
label WHILE_ITER9
push local 0
push constant 14
gt
push local 4
or
if-goto WHILE_BREAKER10
push static 1
push local 0
add
pop pointer 1
push that 0
pop local 1
push constant 32767
push local 1
push constant 1
sub
sub
push local 1
push constant 1
sub
lt
pop local 4
push local 4
if-goto FALSE_CASE11
push static 1
push local 0
push constant 1
add
add
push local 1
push local 1
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push local 1
add
push constant 1
sub
push argument 0
push constant 1
sub
gt
pop local 4
push local 4
if-goto FALSE_CASE12
push local 0
push constant 1
add
pop local 0
label FALSE_CASE12
label FALSE_CASE11
goto WHILE_ITER9
label WHILE_BREAKER10
push constant 0
pop local 1
label WHILE_ITER13
push local 0
push constant 0
lt
if-goto WHILE_BREAKER14
push static 1
push local 0
add
pop pointer 1
push that 0
push constant 1
sub
push argument 0
push constant 1
sub
gt
if-goto FALSE_CASE15
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
add
pop local 1
push argument 0
push static 1
push local 0
add
pop pointer 1
push that 0
sub
pop argument 0
label FALSE_CASE15
push local 0
push constant 1
sub
pop local 0
goto WHILE_ITER13
label WHILE_BREAKER14
push local 2
push local 3
eq
if-goto FALSE_CASE16
push local 1
neg
return
label FALSE_CASE16
push local 1
return
function Math.sqrt 4
push argument 0
push constant 0
lt
not
if-goto FALSE_CASE17
push constant 4
call Sys.error 1
pop temp 0
label FALSE_CASE17
push constant 7
pop local 0
label WHILE_ITER18
push local 0
push constant 0
lt
if-goto WHILE_BREAKER19
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
add
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push argument 0
gt
push local 3
push constant 1
lt
or
if-goto FALSE_CASE20
push local 2
pop local 1
label FALSE_CASE20
push local 0
push constant 1
sub
pop local 0
goto WHILE_ITER18
label WHILE_BREAKER19
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
if-goto FALSE_CASE21
push argument 1
return
label FALSE_CASE21
push argument 0
return
function Math.min 0
push argument 0
push argument 1
gt
if-goto FALSE_CASE22
push argument 0
return
label FALSE_CASE22
push argument 1
return