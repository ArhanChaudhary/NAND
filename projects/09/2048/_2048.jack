class _2048 {
    static int lcg;
    field int size;
    field int gridX, gridY;
    field int combinedPosition;
    field Array grid;

    function void init() {
        
        let lcg = 1234;
        return;
    }

    constructor _2048 new() {
        var int i;
        var int j;
        var Array tmp;

        let gridX = 5;
        let gridY = 5;
        let size = 4;

        let grid = Array.new(size);
        let i = 0;
        while (i < size) {
            let tmp = Array.new(size);
            let grid[i] = tmp;
            let j = 0;
            while (j < size) {
                let tmp[j] = 0;
                let j = j + 1;
            }
            let i = i + 1;
        }
        return this;
    }

    method void run() {
        var int key;
        var boolean exit;

        let exit = false;
        do setRandomPosition();
        while (~exit) {
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
            if (key = 131) {
                do moveGrid(1); // up
            }
            if (key = 133) {
                do moveGrid(2); // down
            }
            if (key = 130) {
                do moveGrid(3); // left
            }
            if (key = 132) {
                do moveGrid(4); // right
            }
            do drawGrid();
            do setRandomPosition();
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
            }
        }
        return;
    }

    method void moveGrid(int direction) {
        var int i;
        var int j;
        var Array tmp;

        var int iStep;
        var int iNext;
        var int iStop;

        if (direction = 1) {
            let i = 0;
            let iStep = size;
            let iNext = 1 - (size * size);
            let iStop = size;
        }
        if (direction = 2) {
            let i = size * (size - 1);
            let iStep = -size;
            let iNext = (size * size) + 1;
            let iStop = size * size;
        }
        if (direction = 3) {
            let i = 0;
            let iStep = 1;
            let iNext = 0;
            let iStop = size * size;
        }
        if (direction = 4) {
            let i = size - 1;
            let iStep = (-1);
            let iNext = size * 2;
            let iStop = (size * (size + 1)) - 1;
        }
        
        let j = 0;
        let combinedPosition = (-1);
        while (~(i = iStop)) {
            while (j < size) {
                do tryMove(i, direction);
                let i = i + iStep;
                let j = j + 1;
            }
            let j = 0;
            let i = i + iNext;
        }
        return;
    }

    method void tryMove(int position, int direction) {
        var int positionValue;
        var int nextPosition;
        var int nextPositionValue;
        let positionValue = getPosition(position);
        if (positionValue = 0) {
            return;
        }
        if (direction = 1) {
            let nextPosition = position - size;
            if (position < size) {
                return;
            }
        }
        if (direction = 2) {
            let nextPosition = position + size;
            if (~(position < (size * (size - 1)))) {
                return;
            }
        }
        if (direction = 3) {
            let nextPosition = position - 1;
            if ((position - ((position / size) * size)) = 0) {
                return;
            }
        }
        if (direction = 4) {
            let nextPosition = position + 1;
            if ((position - ((position / size) * size)) = (size - 1)) {
                return;
            }
        }
        let nextPositionValue = getPosition(nextPosition);
        if (~(nextPositionValue = 0)) {
            if ((~(position = combinedPosition)) & (~(nextPosition = combinedPosition)) & (positionValue = nextPositionValue)) {
                do setPosition(nextPosition, positionValue * 2, false);
                do erasePosition(position, positionValue);
                let combinedPosition = nextPosition;
            }
            return;
        }
        do setPosition(nextPosition, positionValue, false);
        do erasePosition(position, positionValue);
        do tryMove(nextPosition, direction);
        return;
    }

    method void erasePosition(int position, int positionValue) {
        var int div;
        var int mod;
        var Array tmp;
        let div = position / size;
        let mod = position - (div * size);

        let tmp = grid[div];
        let tmp[mod] = 0;

        if (positionValue > 99) {
            do Output.moveCursor(div * 2, mod * 4);
            do Output.printString("   ");
        } else {if (positionValue > 9) {
            do Output.moveCursor(div * 2, mod * 4);
            do Output.printString("  ");
        }}
        do setPosition(position, 0, false);
        return;
    }

    method void drawGrid() {
        var int i;
        var int j;
        var Array tmp;
        var int tmp2;
        let i = 0;
        while (i < size) {
            let tmp = grid[i];
            let j = 0;
            while (j < size) {
                let tmp2 = tmp[j];
                do Output.moveCursor(i * 2, j * 4);
                if (~(tmp2 = 0)) {
                    do Output.printInt(tmp2);
                }
                let j = j + 1;
            }
            do Output.println();
            do Output.println();
            let i = i + 1;
        }
        return;
    }

    method void setRandomPosition() {
        var int randomPositionValue;
        var int lcg16;
        let lcg = Math.abs((3 * lcg) + 1234);
        let lcg = lcg - ((lcg / 16385) * 16385);
        let lcg16 = lcg - ((lcg / 16) * 16);
        let randomPositionValue = getPosition(lcg16);
        if (randomPositionValue = 0) {
            do setPosition(lcg16, 2, true);
            return;
        }
        do setRandomPosition();
        return;
    }

    method int getPosition(int pos) {
        var int div;
        var int mod;
        var Array tmp;
        let div = pos / size;
        let mod = pos - (div * size);

        let tmp = grid[div];
        return tmp[mod];
    }

    method void setPosition(int pos, int value, boolean draw) {
        var int div;
        var int mod;
        var Array tmp;
        let div = pos / size;
        let mod = pos - (div * size);
        if (draw) {
            do Output.moveCursor(div * 2, mod * 4);
            do Output.printInt(value);
        }

        let tmp = grid[div];
        let tmp[mod] = value;
        return;
    }

    method void dispose() {
        var int i;
        var Array tmp;
        let i = 0;
        while (i < size) {
            let tmp = grid[i];
            do tmp.dispose();
            let i = i + 1;
        }
        do Memory.deAlloc(this);
        return;
    }
}