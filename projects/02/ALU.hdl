// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1
// 10 = 1
// 11 = 0
// 01 = 1
// 00 = 0

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Not(in=zx, out=nzx);
    And(a=x[0], b=nzx, out=x[0]);
    And(a=x[1], b=nzx, out=x[1]);
    And(a=x[2], b=nzx, out=x[2]);
    And(a=x[3], b=nzx, out=x[3]);
    And(a=x[4], b=nzx, out=x[4]);
    And(a=x[5], b=nzx, out=x[5]);
    And(a=x[6], b=nzx, out=x[6]);
    And(a=x[7], b=nzx, out=x[7]);
    And(a=x[8], b=nzx, out=x[8]);
    And(a=x[9], b=nzx, out=x[9]);
    And(a=x[10], b=nzx, out=x[10]);
    And(a=x[11], b=nzx, out=x[11]);
    And(a=x[12], b=nzx, out=x[12]);
    And(a=x[13], b=nzx, out=x[13]);
    And(a=x[14], b=nzx, out=x[14]);
    And(a=x[15], b=nzx, out=x[15]);
}