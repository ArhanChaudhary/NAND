import assert from "assert";
import { ALU } from "../build/debug.js";
let u = i => i.map(i => i ? '1' : '0').join("");
let t = i => [...i].map(i => i === '1' ? true : false);
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("101010"))), "000000000000000010")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("111111"))), "000000000000000100")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("111010"))), "111111111111111101")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("001100"))), "000000000000000010")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("110000"))), "111111111111111101")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("001101"))), "111111111111111101")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("110001"))), "000000000000000010")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("001111"))), "000000000000000010")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("110011"))), "000000000000000100")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("011111"))), "000000000000000100")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("110111"))), "000000000000000010")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("001110"))), "111111111111111101")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("110010"))), "111111111111111001")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("000010"))), "111111111111111101")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("010011"))), "000000000000000100")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("000111"))), "111111111111111101")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("000000"))), "000000000000000010")
assert.strictEqual(u(ALU(t("0000000000000000"), t("1111111111111111"), ...t("010101"))), "111111111111111101")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("101010"))), "000000000000000010")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("111111"))), "000000000000000100")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("111010"))), "111111111111111101")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("001100"))), "000000000001000100")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("110000"))), "000000000000001100")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("001101"))), "111111111110111001")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("110001"))), "111111111111110001")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("001111"))), "111111111110111101")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("110011"))), "111111111111110101")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("011111"))), "000000000001001000")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("110111"))), "000000000000010000")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("001110"))), "000000000001000000")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("110010"))), "000000000000001000")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("000010"))), "000000000001010000")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("010011"))), "000000000000111000")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("000111"))), "111111111111001001")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("000000"))), "000000000000000100")
assert.strictEqual(u(ALU(t("0000000000010001"), t("0000000000000011"), ...t("010101"))), "000000000001001100")
console.log("All arithmetic test cases passed");