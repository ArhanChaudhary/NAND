// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Output.jack

/**
 * A library of functions for writing text on the screen.
 * The Hack physical screen consists of 512 rows of 256 pixels each.
 * The library uses a fixed font, in which each character is displayed
 * within a frame which is 11 pixels high (including 1 pixel for inter-line
 * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).
 * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)
 * of 64 characters each (indexed 0..63, left to right). The top left
 * character position on the screen is indexed (0,0). A cursor, implemented
 * as a small filled square, indicates where the next character will be displayed.
 */
class Output {

    // Character map for displaying characters
    static Array charMaps, shiftedCharMaps;
    static int createIndex;
    static int screenPtr;
    static int cursor;
    static boolean cursorIsOdd;
    static String printIntCache;

    /** Initializes the screen, the character map array, and locates the cursor
        at the screen's top-left. */
    function void init() {
        var int i;

        let screenPtr = 16384;
        let cursor = 32;
        let cursorIsOdd = false;
        let charMaps = Array.new(127);
        let shiftedCharMaps = Array.new(127);
        let printIntCache = String.new(6);

        let createIndex = 0;
        // Black square, used for displaying non-printable characters.
        // do Output.create(63,63,63,63,63,63,63,63,63,0);
        do Output.create(32767,32767,32767,32704);
        let createIndex = 32;

        // Assigns the bitmap for each character in the charachter set.
        // The first parameter is the character index, the next 11 numbers
        // are the values of each row in the frame that represents this character.

        // do Output.create(0,0,0,0,0,0,0,0,0,0);          //
        do Output.create(0,0,0,0);
        // do Output.create(12,30,30,30,12,12,0,12,12,0);  // !
        do Output.create(6387,26508,6145,17152);
        // do Output.create(54,54,20,0,0,0,0,0,0,0);       // "
        do Output.create(28082,16384,0,0);
        // do Output.create(0,18,18,63,18,18,63,18,18,0);  // #
        do Output.create(146,12242,9722,9344);
        // do Output.create(12,30,51,3,30,48,51,30,12,12); // $
        do Output.create(6390,12510,24987,25356);
        // do Output.create(0,0,35,51,24,12,6,51,49,0);    // %
        do Output.create(4,15576,6198,15424);
        // do Output.create(12,30,30,12,54,27,27,27,54,0); // &
        do Output.create(6387,25398,14043,15744);
        // do Output.create(12,12,6,0,0,0,0,0,0,0);        // '
        do Output.create(6240,24576,0,0);
        // do Output.create(24,12,6,6,6,6,6,12,24,0);      // (
        do Output.create(12384,24966,3121,17920);
        // do Output.create(6,12,24,24,24,24,24,12,6,0);   // )
        do Output.create(3171,1560,12481,16768);
        // do Output.create(0,0,0,51,30,63,30,51,0,0);     // *
        do Output.create(0,3294,32502,12288);
        // do Output.create(0,0,0,12,12,63,12,12,0,0);     // +
        do Output.create(0,780,32353,16384);
        // do Output.create(0,0,0,0,0,0,0,12,12,6);        // ,
        do Output.create(0,0,1,17158);
        // do Output.create(0,0,0,0,0,63,0,0,0,0);         // -
        do Output.create(0,0,32256,0);
        // do Output.create(0,0,0,0,0,0,0,12,12,0);        // .
        do Output.create(0,0,1,17152);
        // do Output.create(0,0,32,48,24,12,6,3,1,0);      // /
        do Output.create(4,3096,6192,12352);

        // do Output.create(12,30,51,51,51,51,51,30,12,0); // 0
        do Output.create(6390,15603,26523,25344);
        // do Output.create(12,14,15,12,12,12,12,12,63,0); // 1
        do Output.create(6257,29452,6241,20416);
        // do Output.create(30,51,48,24,12,6,3,51,63,0);   // 2
        do Output.create(15774,1548,3102,16320);
        // do Output.create(30,51,48,48,28,48,48,51,30,0); // 3
        do Output.create(15774,3100,24966,14208);
        // do Output.create(16,24,28,26,25,63,24,24,60,0); // 4
        do Output.create(8387,18073,32451,3840);
        // do Output.create(63,3,3,31,48,48,48,51,30,0);   // 5
        do Output.create(32280,14320,24966,14208);
        // do Output.create(28,6,3,3,31,51,51,51,30,0);    // 6
        do Output.create(14384,12511,26526,14208);
        // do Output.create(63,49,48,48,24,12,12,12,12,0); // 7
        do Output.create(32654,3096,6241,17152);
        // do Output.create(30,51,51,51,30,51,51,51,30,0); // 8
        do Output.create(15774,15582,26526,14208);
        // do Output.create(30,51,51,51,62,48,48,24,14,0); // 9
        do Output.create(15774,15614,24963,896);

        // do Output.create(0,0,12,12,0,0,12,12,0,0);      // :
        do Output.create(1,17152,97,16384);
        // do Output.create(0,0,12,12,0,0,12,12,6,0);      // ;
        do Output.create(1,17152,97,16768);
        // do Output.create(0,0,24,12,6,3,6,12,24,0);      // <
        do Output.create(3,774,1585,17920);
        // do Output.create(0,0,0,63,0,0,63,0,0,0);        // =
        do Output.create(0,4032,504,0);
        // do Output.create(0,0,3,6,12,24,12,6,3,0);       // >
        do Output.create(0,12684,12384,24768);
        // do Output.create(30,51,51,24,12,12,0,12,12,0);  // ?
        do Output.create(15774,13836,6145,17152);
        // do Output.create(30,51,51,59,59,59,27,3,30,0);  // @
        do Output.create(15774,16123,30424,14208);

        // do Output.create(12,30,51,51,63,51,51,51,51,0); // A
        do Output.create(6390,15615,26526,15552);
        // do Output.create(31,51,51,51,31,51,51,51,31,0); // B
        do Output.create(16286,15583,26526,14272);
        // do Output.create(28,54,35,3,3,3,35,54,28,0);    // C
        do Output.create(14772,12483,1822,26368);
        // do Output.create(15,27,51,51,51,51,51,27,15,0); // D
        do Output.create(7902,15603,26523,13248);
        // do Output.create(63,51,35,11,15,11,35,51,63,0); // E
        do Output.create(32668,13007,5918,16320);
        // do Output.create(63,51,35,11,15,11,3,3,3,0);    // F
        do Output.create(32668,13007,5656,12480);
        // do Output.create(28,54,35,3,59,51,51,54,44,0);  // G
        do Output.create(14772,12539,26526,27392);
        // do Output.create(51,51,51,51,63,51,51,51,51,0); // H
        do Output.create(26526,15615,26526,15552);
        // do Output.create(30,12,12,12,12,12,12,12,30,0); // I
        do Output.create(15457,17164,6241,18304);
        // do Output.create(60,24,24,24,24,24,27,27,14,0); // J
        do Output.create(30915,1560,12507,13184);
        // do Output.create(51,51,51,27,15,27,51,51,51,0); // K
        do Output.create(26526,14031,14238,15552);
        // do Output.create(3,3,3,3,3,3,35,51,63,0);       // L
        do Output.create(1560,12483,1822,16320);
        // do Output.create(33,51,63,63,51,51,51,51,51,0); // M
        do Output.create(17311,32755,26526,15552);
        // do Output.create(51,51,55,55,63,59,59,51,51,0); // N
        do Output.create(26526,32255,30686,15552);
        // do Output.create(30,51,51,51,51,51,51,51,30,0); // O
        do Output.create(15774,15603,26526,14208);
        // do Output.create(31,51,51,51,31,3,3,3,3,0);     // P
        do Output.create(16286,15583,1560,12480);
        // do Output.create(30,51,51,51,51,51,63,59,30,48);// Q
        do Output.create(15774,15603,26623,14256);
        // do Output.create(31,51,51,51,31,27,51,51,51,0); // R
        do Output.create(16286,15583,14238,15552);
        // do Output.create(30,51,51,6,28,48,51,51,30,0);  // S
        do Output.create(15774,12700,24990,14208);
        // do Output.create(63,63,45,12,12,12,12,12,30,0); // T
        do Output.create(32765,21260,6241,18304);
        // do Output.create(51,51,51,51,51,51,51,51,30,0); // U
        do Output.create(26526,15603,26526,14208);
        // do Output.create(51,51,51,51,51,30,30,12,12,0); // V
        do Output.create(26526,15603,15601,17152);
        // do Output.create(51,51,51,51,51,63,63,63,18,0); // W
        do Output.create(26526,15603,32767,29824);
        // do Output.create(51,51,30,30,12,30,30,51,51,0); // X
        do Output.create(26523,26508,15606,15552);
        // do Output.create(51,51,51,51,30,12,12,12,30,0); // Y
        do Output.create(26526,15582,6241,18304);
        // do Output.create(63,51,49,24,12,6,35,51,63,0);  // Z
        do Output.create(32670,5644,3358,16320);

        // do Output.create(30,6,6,6,6,6,6,6,30,0);          // [
        do Output.create(15408,24966,3120,26496);
        // do Output.create(0,0,1,3,6,12,24,48,32,0);        // \
        do Output.create(0,4294,6342,2048);
        // do Output.create(30,24,24,24,24,24,24,24,30,0);   // ]
        do Output.create(15555,1560,12483,1920);
        // do Output.create(8,28,54,0,0,0,0,0,0,0);          // ^
        do Output.create(4326,24576,0,0);
        // do Output.create(0,0,0,0,0,0,0,0,0,63);           // _
        do Output.create(0,0,0,63);
        // do Output.create(6,12,24,0,0,0,0,0,0,0);          // `
        do Output.create(3171,0,0,0);

        // do Output.create(0,0,0,14,24,30,27,27,54,0);      // a
        do Output.create(0,920,15579,15744);
        // do Output.create(3,3,3,15,27,51,51,51,30,0);      // b
        do Output.create(1560,13275,26526,14208);
        // do Output.create(0,0,0,30,51,3,3,51,30,0);        // c
        do Output.create(0,1971,1566,14208);
        // do Output.create(48,48,48,60,54,51,51,51,30,0);  // d
        do Output.create(24966,3894,26526,14208);
        // do Output.create(0,0,0,30,51,63,3,51,30,0);      // e
        do Output.create(0,1971,32286,14208);
        // do Output.create(28,54,38,6,15,6,6,6,15,0);      // f
        do Output.create(14772,24975,3120,25536);
        // do Output.create(0,0,30,51,51,51,62,48,51,30);   // g
        do Output.create(3,27891,26614,3294);
        // do Output.create(3,3,3,27,55,51,51,51,51,0);     // h
        do Output.create(1560,14071,26526,15552);
        // do Output.create(12,12,0,14,12,12,12,12,30,0);   // i
        do Output.create(6240,908,6241,18304);
        // do Output.create(48,48,0,56,48,48,48,48,51,30);  // j
        do Output.create(24960,3632,24966,3294);
        // do Output.create(3,3,3,51,27,15,15,27,51,0);     // k
        do Output.create(1560,15579,7803,15552);
        // do Output.create(14,12,12,12,12,12,12,12,30,0);  // l
        do Output.create(7265,17164,6241,18304);
        // do Output.create(0,0,0,29,63,43,43,43,43,0);     // m
        do Output.create(0,1919,22365,15040);
        // do Output.create(0,0,0,29,51,51,51,51,51,0);     // n
        do Output.create(0,1907,26526,15552);
        // do Output.create(0,0,0,30,51,51,51,51,30,0);     // o
        do Output.create(0,1971,26526,14208);
        // do Output.create(0,0,0,30,51,51,51,31,3,3);      // p
        do Output.create(0,1971,26523,28867);
        // do Output.create(0,0,0,30,51,51,51,62,48,48);    // q
        do Output.create(0,1971,26527,27696);
        // do Output.create(0,0,0,29,55,51,3,3,7,0);        // r
        do Output.create(0,1911,26136,12736);
        // do Output.create(0,0,0,30,51,6,24,51,30,0);      // s
        do Output.create(0,1971,3270,14208);
        // do Output.create(4,6,6,15,6,6,6,54,28,0);        // t
        do Output.create(2096,25542,3126,26368);
        // do Output.create(0,0,0,27,27,27,27,27,54,0);     // u
        do Output.create(0,1755,14043,15744);
        // do Output.create(0,0,0,51,51,51,51,30,12,0);     // v
        do Output.create(0,3315,26523,25344);
        // do Output.create(0,0,0,51,51,51,63,63,18,0);     // w
        do Output.create(0,3315,26623,29824);
        // do Output.create(0,0,0,51,30,12,12,30,51,0);     // x
        do Output.create(0,3294,6243,27840);
        // do Output.create(0,0,0,51,51,51,62,48,24,15);    // y
        do Output.create(0,3315,26614,1551);
        // do Output.create(0,0,0,63,27,12,6,51,63,0);      // z
        do Output.create(0,4059,6198,16320);

        // do Output.create(56,12,12,12,7,12,12,12,56,0);   // {
        do Output.create(28769,17159,6241,19968);
        // do Output.create(12,12,12,12,12,12,12,12,12,0);  // |
        do Output.create(6241,17164,6241,17152);
        // do Output.create(7,12,12,12,56,12,12,12,7,0);    // }
        do Output.create(3681,17208,6241,16832);
        // do Output.create(38,45,25,0,0,0,0,0,0,0);        // ~
        do Output.create(19819,4096,0,0);
    }

    //reates the character map array of the given character index, using the given values.
    function void create(int abc, int cde, int fgh, int hij) {
        var Array map, shiftedMap;
        var int i;
        var int unpacked;

        let map = Array.new(10);
        let shiftedMap = Array.new(10);
        let charMaps[createIndex] = map;
        let shiftedCharMaps[createIndex] = shiftedMap;
        while (~(i > 9)) {
            if (~((i = 0) | (i = 5))) {
                if (~((i = 1) | (i = 6))) {
                    if (~((i = 2) | (i = 7))) {
                        if (~((i = 3) | (i = 8))) {
                            let unpacked = (cde & 63) * 2;
                            let abc = fgh;
                            let cde = hij;
                        } else {
                            let unpacked = ((cde & 4032) / 64) * 2;
                        }
                    } else {
                        let unpacked = ((abc & 7) * 16) | ((cde / 4096) * 2);
                    }
                } else {
                    let unpacked = ((abc & 504) / 8) * 2;
                }
            } else {
                let unpacked = (abc / 512) * 2;
            }
            let map[i] = unpacked;
            let shiftedMap[i] = unpacked * 256;
            let i = i + 1;
        }

        let createIndex = createIndex + 1;
    }

    // Returns the character map (array of size 11) of the given character.
    // If the given character is invalid or non-printable, returns the
    // character map of a black square.
    function Array getMap(char c) {
        if (~((c > 31) & (c < 127)))
            let c = 0;
        return charMaps[c];
    }

    /** Moves the cursor to the j-th column of the i-th row,
     *  and erases the character displayed there. */
    function void moveCursor(int i, int j) {
        if (~((i > -1) & (i < 23) & (j > -1) & (j < 64)))
            do Sys.error(20);
        let cursorIsOdd = (j & 1) = 1;
        let cursor = (j / 2) + (352 * i) + 32;
        do Output.drawChar(32);
    }

    function void drawChar(char c) {
        var Array map;
        var int mask;
        var int i;
        if (~cursorIsOdd) {
            let map = charMaps[c];
            let mask = -256;
        } else {
            let map = shiftedCharMaps[c];
            let mask = 255;
        }

        let screenPtr[cursor] = 0;
        let cursor = cursor + 32;
        while (~(i > 9)) {
            let screenPtr[cursor] = (screenPtr[cursor] & mask) | map[i];
            let cursor = cursor + 32;
            let i = i + 1;
        }
        let cursor = cursor - 352;
    }

    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function void printChar(char c) {
        do Output.drawChar(c);
        if (~((cursor = 7807) & cursorIsOdd)) {
            let cursorIsOdd = ~cursorIsOdd;
            if (~cursorIsOdd) {
                let cursor = cursor + 1;
                if ((cursor & 31) = 0) {
                    let cursor = cursor + 320;
                }
            }
        } else {
            let cursor = 32;
            let cursorIsOdd = false;
        }
    }

    /** displays the given string starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printString(String s) {
        var int length;
        var int i;
        let length = s.length();
        while (i < length) {
            do Output.printChar(s.charAt(i));
            let i = i + 1;
        }
    }

    /** Displays the given integer starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printInt(int i) {
        do printIntCache.setInt(i);
        do Output.printString(printIntCache);
    }

    /** Advances the cursor to the beginning of the next line. */
    function void println() {
        var int currentRow;
        let currentRow = 32;
        while (currentRow < cursor) {
            let currentRow = currentRow + 352;
        }
        if (currentRow = 8128) {
            let currentRow = 32;
        }
        let cursor = currentRow;
        let cursorIsOdd = false;
    }

    /** Moves the cursor one column back. */
    function void backSpace() {
        if (~((~(cursor = 32)) | cursorIsOdd)) {
            let cursor = 7807;
            let cursorIsOdd = true;
        } else {
            if (~cursorIsOdd) {
                if ((cursor & 31) = 0) {
                    let cursor = cursor - 320;
                }
                let cursor = cursor - 1;
            }
            let cursorIsOdd = ~cursorIsOdd;
        }
        do Output.drawChar(32);
    }
}
