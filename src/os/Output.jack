// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Output.jack

/**
 * A library of functions for writing text on the screen.
 * The Hack physical screen consists of 512 rows of 256 pixels each.
 * The library uses a fixed font, in which each character is displayed 
 * within a frame which is 11 pixels high (including 1 pixel for inter-line 
 * spacing) and 8 pixels wide (including 2 pixels for inter-character spacing).
 * The resulting grid accommodates 23 rows (indexed 0..22, top to bottom)
 * of 64 characters each (indexed 0..63, left to right). The top left 
 * character position on the screen is indexed (0,0). A cursor, implemented
 * as a small filled square, indicates where the next character will be displayed.
 */
class Output {

    // Character map for displaying characters
    static Array charMaps, shiftedCharMaps;
    static int createIndex;
    static int screenPtr;
    static int cursor;
    static boolean cursorIsOdd;
    static String printIntCache;

    /** Initializes the screen, the character map array, and locates the cursor 
        at the screen's top-left. */
    function void init() {
        var int i;

        let screenPtr = 16384;
        let cursor = 32;
        let cursorIsOdd = false;
        let charMaps = Array.new(127);
        let shiftedCharMaps = Array.new(127);
        let printIntCache = String.new(6);
        
        let createIndex = 0;
        // Black square, used for displaying non-printable characters.
        // do Output.create(63,63,63,63,63,63,63,63,63,0);
        do Output.create(-1,16383,-1,16320);

        let createIndex = 32;
        // Assigns the bitmap for each character in the charachter set.
        // The first parameter is the character index, the next 11 numbers
        // are the values of each row in the frame that represents this character.

        // do Output.create(0,0,0,0,0,0,0,0,0,0);          //
        // do Output.create(12,30,30,30,12,12,0,12,12,0);  // !
        // do Output.create(54,54,20,0,0,0,0,0,0,0);       // "
        // do Output.create(0,18,18,63,18,18,63,18,18,0);  // #
        // do Output.create(12,30,51,3,30,48,51,30,12,12); // $
        // do Output.create(0,0,35,51,24,12,6,51,49,0);    // %
        // do Output.create(12,30,30,12,54,27,27,27,54,0); // &
        // do Output.create(12,12,6,0,0,0,0,0,0,0);        // '
        // do Output.create(24,12,6,6,6,6,6,12,24,0);      // (
        // do Output.create(6,12,24,24,24,24,24,12,6,0);   // )
        // do Output.create(0,0,0,51,30,63,30,51,0,0);     // *
        // do Output.create(0,0,0,12,12,63,12,12,0,0);     // +
        // do Output.create(0,0,0,0,0,0,0,12,12,6);        // ,
        // do Output.create(0,0,0,0,0,63,0,0,0,0);         // -
        // do Output.create(0,0,0,0,0,0,0,12,12,0);        // .    
        // do Output.create(0,0,32,48,24,12,6,3,1,0);      // /
        
        // do Output.create(12,30,51,51,51,51,51,30,12,0); // 0
        // do Output.create(12,14,15,12,12,12,12,12,63,0); // 1
        // do Output.create(30,51,48,24,12,6,3,51,63,0);   // 2
        // do Output.create(30,51,48,48,28,48,48,51,30,0); // 3
        // do Output.create(16,24,28,26,25,63,24,24,60,0); // 4
        // do Output.create(63,3,3,31,48,48,48,51,30,0);   // 5
        // do Output.create(28,6,3,3,31,51,51,51,30,0);    // 6
        // do Output.create(63,49,48,48,24,12,12,12,12,0); // 7
        // do Output.create(30,51,51,51,30,51,51,51,30,0); // 8
        // do Output.create(30,51,51,51,62,48,48,24,14,0); // 9
        
        // do Output.create(0,0,12,12,0,0,12,12,0,0);      // :
        // do Output.create(0,0,12,12,0,0,12,12,6,0);      // ;
        // do Output.create(0,0,24,12,6,3,6,12,24,0);      // <
        // do Output.create(0,0,0,63,0,0,63,0,0,0);        // =
        // do Output.create(0,0,3,6,12,24,12,6,3,0);       // >
        // do Output.create(30,51,51,24,12,12,0,12,12,0);  // ?
        // do Output.create(30,51,51,59,59,59,27,3,30,0);  // @

        // do Output.create(12,30,51,51,63,51,51,51,51,0); // A
        // do Output.create(31,51,51,51,31,51,51,51,31,0); // B
        // do Output.create(28,54,35,3,3,3,35,54,28,0);    // C
        // do Output.create(15,27,51,51,51,51,51,27,15,0); // D
        // do Output.create(63,51,35,11,15,11,35,51,63,0); // E
        // do Output.create(63,51,35,11,15,11,3,3,3,0);    // F
        // do Output.create(28,54,35,3,59,51,51,54,44,0);  // G
        // do Output.create(51,51,51,51,63,51,51,51,51,0); // H
        // do Output.create(30,12,12,12,12,12,12,12,30,0); // I
        // do Output.create(60,24,24,24,24,24,27,27,14,0); // J
        // do Output.create(51,51,51,27,15,27,51,51,51,0); // K
        // do Output.create(3,3,3,3,3,3,35,51,63,0);       // L
        // do Output.create(33,51,63,63,51,51,51,51,51,0); // M
        // do Output.create(51,51,55,55,63,59,59,51,51,0); // N
        // do Output.create(30,51,51,51,51,51,51,51,30,0); // O
        // do Output.create(31,51,51,51,31,3,3,3,3,0);     // P
        // do Output.create(30,51,51,51,51,51,63,59,30,48);// Q
        // do Output.create(31,51,51,51,31,27,51,51,51,0); // R
        // do Output.create(30,51,51,6,28,48,51,51,30,0);  // S
        // do Output.create(63,63,45,12,12,12,12,12,30,0); // T
        // do Output.create(51,51,51,51,51,51,51,51,30,0); // U
        // do Output.create(51,51,51,51,51,30,30,12,12,0); // V
        // do Output.create(51,51,51,51,51,63,63,63,18,0); // W
        // do Output.create(51,51,30,30,12,30,30,51,51,0); // X
        // do Output.create(51,51,51,51,30,12,12,12,30,0); // Y
        // do Output.create(63,51,49,24,12,6,35,51,63,0);  // Z

        // do Output.create(30,6,6,6,6,6,6,6,30,0);          // [
        // do Output.create(0,0,1,3,6,12,24,48,32,0);        // \
        // do Output.create(30,24,24,24,24,24,24,24,30,0);   // ]
        // do Output.create(8,28,54,0,0,0,0,0,0,0);          // ^
        // do Output.create(0,0,0,0,0,0,0,0,0,63);           // _
        // do Output.create(6,12,24,0,0,0,0,0,0,0);          // `

        // do Output.create(0,0,0,14,24,30,27,27,54,0);      // a
        // do Output.create(3,3,3,15,27,51,51,51,30,0);      // b
        // do Output.create(0,0,0,30,51,3,3,51,30,0);        // c
        // do Output.create(48,48,48,60,54,51,51,51,30,0);  // d
        // do Output.create(0,0,0,30,51,63,3,51,30,0);      // e
        // do Output.create(28,54,38,6,15,6,6,6,15,0);      // f
        // do Output.create(0,0,30,51,51,51,62,48,51,30);   // g
        // do Output.create(3,3,3,27,55,51,51,51,51,0);     // h
        // do Output.create(12,12,0,14,12,12,12,12,30,0);   // i
        // do Output.create(48,48,0,56,48,48,48,48,51,30);  // j
        // do Output.create(3,3,3,51,27,15,15,27,51,0);     // k
        // do Output.create(14,12,12,12,12,12,12,12,30,0);  // l
        // do Output.create(0,0,0,29,63,43,43,43,43,0);     // m
        // do Output.create(0,0,0,29,51,51,51,51,51,0);     // n
        // do Output.create(0,0,0,30,51,51,51,51,30,0);     // o
        // do Output.create(0,0,0,30,51,51,51,31,3,3);      // p
        // do Output.create(0,0,0,30,51,51,51,62,48,48);    // q
        // do Output.create(0,0,0,29,55,51,3,3,7,0);        // r
        // do Output.create(0,0,0,30,51,6,24,51,30,0);      // s
        // do Output.create(4,6,6,15,6,6,6,54,28,0);        // t
        // do Output.create(0,0,0,27,27,27,27,27,54,0);     // u
        // do Output.create(0,0,0,51,51,51,51,30,12,0);     // v
        // do Output.create(0,0,0,51,51,51,63,63,18,0);     // w
        // do Output.create(0,0,0,51,30,12,12,30,51,0);     // x
        // do Output.create(0,0,0,51,51,51,62,48,24,15);    // y
        // do Output.create(0,0,0,63,27,12,6,51,63,0);      // z
        
        // do Output.create(56,12,12,12,7,12,12,12,56,0);   // {
        // do Output.create(12,12,12,12,12,12,12,12,12,0);  // |
        // do Output.create(7,12,12,12,56,12,12,12,7,0);    // }
        // do Output.create(38,45,25,0,0,0,0,0,0,0);        // ~
        do Output.create(0,0,0,0);
        do Output.create(12775,10124,12291,768);
        do Output.create(-9371,0,0,0);
        do Output.create(292,12242,19444,9344);
        do Output.create(12780,12510,-15561,8972);
        do Output.create(8,15576,12396,15424);
        do Output.create(12775,9014,28086,15744);
        do Output.create(12481,8192,0,0);
        do Output.create(24769,8582,6243,1536);
        do Output.create(6342,1560,24963,384);
        do Output.create(0,3294,-532,12288);
        do Output.create(0,780,-829,0);
        do Output.create(0,0,3,774);
        do Output.create(0,0,-1024,0);
        do Output.create(0,0,3,768);
        do Output.create(8,3096,12384,12352);
        do Output.create(12780,15603,-12489,8960);
        do Output.create(12515,13068,12483,4032);
        do Output.create(31548,1548,6204,16320);
        do Output.create(31548,3100,-15604,14208);
        do Output.create(16775,1689,-634,3840);
        do Output.create(-976,14320,-15604,14208);
        do Output.create(28768,12511,-12484,14208);
        do Output.create(-228,3096,12483,768);
        do Output.create(31548,15582,-12484,14208);
        do Output.create(31548,15614,-15610,896);
        do Output.create(3,768,195,0);
        do Output.create(3,768,195,384);
        do Output.create(6,774,3171,1536);
        do Output.create(0,4032,1008,0);
        do Output.create(0,12684,24769,8384);
        do Output.create(31548,13836,12291,768);
        do Output.create(31548,16123,-4688,14208);
        do Output.create(12780,15615,-12484,15552);
        do Output.create(32572,15583,-12484,14272);
        do Output.create(29544,12483,3645,9984);
        do Output.create(15804,15603,-12490,13248);
        do Output.create(-200,13007,11836,16320);
        do Output.create(-200,13007,11312,12480);
        do Output.create(29544,12539,-12483,11008);
        do Output.create(-12484,15615,-12484,15552);
        do Output.create(30915,780,12483,1920);
        do Output.create(-3706,1560,25014,13184);
        do Output.create(-12484,14031,28476,15552);
        do Output.create(3120,12483,3644,16320);
        do Output.create(-30913,16371,-12484,15552);
        do Output.create(-12483,15871,-4164,15552);
        do Output.create(31548,15603,-12484,14208);
        do Output.create(32572,15583,3120,12480);
        do Output.create(31548,15603,-12290,14256);
        do Output.create(32572,15583,28476,15552);
        do Output.create(31548,12700,-15556,14208);
        do Output.create(-5,4876,12483,1920);
        do Output.create(-12484,15603,-12484,14208);
        do Output.create(-12484,15603,31203,768);
        do Output.create(-12484,15603,-1,13440);
        do Output.create(-12489,10124,31212,15552);
        do Output.create(-12484,15582,12483,1920);
        do Output.create(-196,5644,6716,16320);
        do Output.create(30817,8582,6241,10112);
        do Output.create(0,4294,12684,2048);
        do Output.create(31110,1560,24966,1920);
        do Output.create(8653,8192,0,0);
        do Output.create(0,0,0,63);
        do Output.create(6342,0,0,0);
        do Output.create(0,920,31158,15744);
        do Output.create(3120,13275,-12484,14208);
        do Output.create(0,1971,3132,14208);
        do Output.create(-15604,3894,-12484,14208);
        do Output.create(0,1971,-964,14208);
        do Output.create(29545,8591,6241,9152);
        do Output.create(7,11507,-12308,3294);
        do Output.create(3120,14071,-12484,15552);
        do Output.create(12480,908,12483,1920);
        do Output.create(-15616,3632,-15604,3294);
        do Output.create(3120,15579,15606,15552);
        do Output.create(14531,780,12483,1920);
        do Output.create(0,1919,-20806,15040);
        do Output.create(0,1907,-12484,15552);
        do Output.create(0,1971,-12484,14208);
        do Output.create(0,1971,-12489,12483);
        do Output.create(0,1971,-12481,11312);
        do Output.create(0,1911,-13264,12736);
        do Output.create(0,1971,6540,14208);
        do Output.create(4193,9158,6253,9984);
        do Output.create(0,1755,28086,15744);
        do Output.create(0,3315,-12489,8960);
        do Output.create(0,3315,-12289,13440);
        do Output.create(0,3294,12487,11456);
        do Output.create(0,3315,-12308,1551);
        do Output.create(0,4059,12396,16320);
        do Output.create(-7997,775,12483,3584);
        do Output.create(12483,780,12483,768);
        do Output.create(7363,824,12483,448);
        do Output.create(-25898,4096,0,0);
    }

    //reates the character map array of the given character index, using the given values.
    function void create(int abc, int cde, int fgh, int hij) {
        var Array map, shiftedMap;
        var int i;
        var int a;
        var int b;
        var int unpacked;

        let map = Array.new(11);
        let shiftedMap = Array.new(11);
        let charMaps[createIndex] = map;
        let shiftedCharMaps[createIndex] = shiftedMap;
        let a = abc;
        let b = cde;
        while (~(i > 10)) {
            if ((i = 0) | (i = 5)) {
                let unpacked = ((a & -1024) / 1024) & 63;
            } else if ((i = 1) | (i = 6)) {
                let unpacked = (a & 1008) / 16;
            } else if ((i = 2) | (i = 7)) {
                let unpacked = ((a * 4) & 60) | ((b & 12288) / 4096);
            } else if ((i = 3) | (i = 8)) {
                let unpacked = (b & 4032) / 64;
            } else if ((i = 4) | (i = 9)) {
                let unpacked = b & 63;
                let a = fgh;
                let b = hij;
            } else {
                let unpacked = 0;
            }
            let map[i] = unpacked;
            let shiftedMap[i] = unpacked * 256;
            let i = i + 1;
        }

        let createIndex = createIndex + 1;
    }
    
    // Returns the character map (array of size 11) of the given character.
    // If the given character is invalid or non-printable, returns the
    // character map of a black square.
    function Array getMap(char c) {
        if (~((c > 31) & (c < 127)))
            let c = 0;
        return charMaps[c];
    }

    /** Moves the cursor to the j-th column of the i-th row,
     *  and erases the character displayed there. */
    function void moveCursor(int i, int j) {
        if ((i < 0) | (i > 22) | (j < 0) | (j > 63)) 
            do Sys.error(20);
        let cursorIsOdd = (j & 1) = 1;
        let cursor = (j / 2) + (352 * i) + 32;
        do Output.drawChar(32);
    }
    
    function void drawChar(char c) {
        var Array map;
        var int mask;
        var int i;
        if (~cursorIsOdd) {
            let map = charMaps[c];
            let mask = -256;
        } else {
            let map = shiftedCharMaps[c];
            let mask = 255;
        }
        while (~(i > 10)) {
            let screenPtr[cursor] = (screenPtr[cursor] & mask) | map[i];
            let cursor = cursor + 32;
            let i = i + 1;
        }
        let cursor = cursor - 352;
    }

    /** Displays the given character at the cursor location,
     *  and advances the cursor one column forward. */
    function void printChar(char c) {
        do Output.drawChar(c);
        if ((cursor = 7807) & cursorIsOdd) {
            let cursor = 32;
            let cursorIsOdd = false;
        } else {
            let cursorIsOdd = ~cursorIsOdd;
            if (~cursorIsOdd) {
                let cursor = cursor + 1;
            }
        }
    }

    /** displays the given string starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printString(String s) {
        var int length;
        var int i;
        let length = s.length();
        while (i < length) {
            do Output.printChar(s.charAt(i));
            let i = i + 1;
        }
    }

    /** Displays the given integer starting at the cursor location,
     *  and advances the cursor appropriately. */
    function void printInt(int i) {
        do printIntCache.setInt(i);
        do Output.printString(printIntCache);
    }

    /** Advances the cursor to the beginning of the next line. */
    function void println() {
        var int currentRow;
        let currentRow = 32;
        while (currentRow < cursor) {
            let currentRow = currentRow + 352;
        }
        let cursor = currentRow;
        let cursorIsOdd = false;
    }

    /** Moves the cursor one column back. */
    function void backSpace() {
        if (~((~(cursor = 32)) | cursorIsOdd)) {
            let cursor = 7807;
            let cursorIsOdd = true;
        } else {
            if (~cursorIsOdd) {
                let cursor = cursor - 1;
            }
            let cursorIsOdd = ~cursorIsOdd;
        }
        do Output.drawChar(32);
    }
}
