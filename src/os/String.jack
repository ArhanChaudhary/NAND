// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
 class String {
    field int maxLength;
    field Array stringArray;
    field int currentLength;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength_) {
        let maxLength = maxLength_;
        let stringArray = Array.new(maxLength_);
        let currentLength = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do stringArray.dispose();
        do Memory.deAlloc(this);
    }

    /** Returns the current length of this string. */
    method int length() {
        return currentLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < currentLength))
            do Sys.error(15);
        return stringArray[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j < currentLength))
            do Sys.error(16);
        let stringArray[j] = c;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (currentLength = maxLength)
            do Sys.error(17);
        let stringArray[currentLength] = c;
        let currentLength = currentLength + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(currentLength = 0))
            let currentLength = currentLength - 1;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int v, i, isNegative;
        let isNegative = stringArray[0] = 45;
        if (isNegative) {
            let i = 1;
        }
        while (i < currentLength) {
            let v = (v * 10) + (stringArray[i] - 48);
            let i = i + 1;
        }
        if (~isNegative) {
            return v;
        }
        return -v;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int shifted, valMagnitude;
        if (~(val < 0)) {
            let currentLength = 0;
        } else {
            let stringArray[0] = 45;
            let currentLength = 1;
            let val = -val;
        }
        if (~(val < 10000)) {
            let valMagnitude = 5;
        } else if (~(val < 1000)) {
            let valMagnitude = 4;
        } else if (~(val < 100)) {
            let valMagnitude = 3;
        } else if (~(val < 10)) {
            let valMagnitude = 2;
        } else {
            let valMagnitude = 1;
        }
        let currentLength = currentLength + valMagnitude;
        if (currentLength > maxLength)
            do Sys.error(19);
        let valMagnitude = currentLength;
        let shifted = 1;
        while (~(shifted = 0)) {
            let shifted = val / 10;
            let valMagnitude = valMagnitude - 1;
            let stringArray[valMagnitude] = (val - (shifted * 10)) + 48;
            let val = shifted;
        }
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }
    

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
