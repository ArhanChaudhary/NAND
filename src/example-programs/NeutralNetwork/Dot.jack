class Dot {
    field int posX, posY;
    field int velX, velY;
    field AccelerationVector acc;
    static int goalX, goalY;
    field int prevX, prevY;
    field Brain brain;
    field boolean dead;
    field boolean reachedGoal;
    static int stepWeight;
    static int brainSize;
    static int minStep;

    function void init(int _goalX, int _goalY, int _brainSize) {
        let goalX = _goalX;
        let goalY = _goalY;
        let brainSize = _brainSize;
        let minStep = 32767;
        let stepWeight = (32767 - 10000) / _brainSize;
    }

    constructor Dot new(Brain _brain) {
        let brain = _brain;
        do instantiate();
        return this;
    }

    method void instantiate() {
        let dead = false;
        let reachedGoal = false;
        let prevX = 0;
        let prevY = 0;

        let posX = 10;
        let posY = 128;
        let velX = 0;
        let velY = 0;
        let acc = null;
    }

    method boolean getDead() {
        return dead;
    }

    function void setMinStep(int _minStep) {
        let minStep = _minStep;
    }

    method Brain getBrain() {
        return brain;
    }

    method void setBrain(Brain _brain) {
        let brain = _brain;
    }

    method boolean getReachedGoal() {
        return reachedGoal;
    }

    method void show() {
        if (~dead) {
            do Screen.setColor(false);
            do Screen.drawRectangle(prevX, prevY, prevX + 2, prevY + 2);
            do Screen.setColor(true);
            let prevX = posX - 1;
            let prevY = posY - 1;
            do Screen.drawRectangle(prevX, prevY, prevX + 2, prevY + 2);
        }
    }

    method void update() {
        var boolean newVelXIsNegative;
        var boolean newVelYIsNegative;
        if (~(brain.getStep() > minStep)) {
            if (~dead) {
                if (~(brainSize > brain.getStep())) {
                    let dead = true;
                } else {
                    let acc = brain.getNextDirection();
                }
    
                let velX = velX + acc.getX();
                let velY = velY + acc.getY();
                let newVelXIsNegative = velX < 0;
                let newVelYIsNegative = velY < 0;
    
                if (newVelXIsNegative) {
                    let velX = -velX;
                }
    
                if (newVelYIsNegative) {
                    let velY = -velY;
                }
    
                if (velX > 5) {
                    let velX = 5;
                    let velY = 0;
                } else if (velX = 4) {
                    if (velY > 3) {
                        let velY = 3;
                    }
                } else if ((velX = 3) | (velX = 2) | (velX = 1)) {
                    if (velY > 4) {
                        let velY = 4;
                    }
                } else if (velX = 0) {
                    if (velY > 5) {
                        let velY = 5;
                    }
                }
    
                if (newVelXIsNegative) {
                    let velX = -velX;
                }
                if (newVelYIsNegative) {
                    let velY = -velY;
                }
    
                let posX = posX + velX;
                let posY = posY + velY;
    
                if (~((posX < 2) | (posY < 2) | (posX > 510) | (posY > 254))) {
                    if (~((Math.abs(posX - goalX) > 3) | (Math.abs(posY - goalY) > 3))) {
                        let reachedGoal = true;
                        let dead = true;
                    }
                } else {
                    let dead = true;
                }
            }
        } else {
            let dead = true;
        }
    }

    method int calculateFitness() {
        var int x;
        var int y;
        if (~reachedGoal) {
            let x = Math.abs(posX - goalX) / 4;
            let y = Math.abs(posY - goalY) / 4;
            return 32767 / ((x * x) + (y * y));
        }
        return Math.max(10000, 32767 - (stepWeight * brain.getStep()));
    }

    method Dot getBaby() {
        return Dot.new(brain.clone());
    }
}