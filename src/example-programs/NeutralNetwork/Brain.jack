class Brain {
    field Array directions;
    field int step;
    static int brainSize;
    
    function void init(int _brainSize) {
        let brainSize = _brainSize;
    }

    function int getBrainSize() {
        return brainSize;
    }

    constructor Brain new() {
        var int i;
        let step = 0;
        let directions = Array.new(brainSize);
        while (i < brainSize) {
            let directions[i] = Vector.randomAcc();
            let i = i + 1;
        }
        return this;
    }

    constructor Brain newWithDirections(Array _directions) {
        let step = 0;
        let directions = _directions;
        return this;
    }

    method Array getDirections() {
        return directions;
    }

    method int getStep() {
        return step;
    }

    method void incStep() {
        let step = step + 1;
    }

    method int getNextDirection() {
        var int ret;
        let ret = directions[step];
        let step = step + 1;
        return ret;
    }

    method Brain clone() {
        var int i;
        var Array _directions;
        let _directions = Array.new(brainSize);
        while (i < brainSize) {
            let directions[i] = _directions[i];
            let i = i + 1;
        }
        return Brain.newWithDirections(_directions);
    }

    method void mutate() {
        var int i;
        while (i < brainSize) {
            if ((Util.random() & 127) = 0) {
                let directions[i] = Vector.randomAcc();
            }
            let i = i + 1;
        }
    }
}