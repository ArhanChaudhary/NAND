class Main {
    static int brainSize;
    static int populationCount;
    static int initialX;
    static int initialY;
    static int goalX;
    static int goalY;
    static boolean onlyBest;
    static Array obstacles;

    static String generationString;
    static String goalStepCountString;
    static String NAString;

    function void init() {
        let generationString = "Generation: ";
        let goalStepCountString = "Goal step count: ";
        let NAString = "NA";
    }

    function void main() {
        var int i;
        do Util.init();
        do AccelerationVector.init();
        do Population.init();
        do Main.init();

        // do Screen.drawRectangle(80, 66, 432, 143);
        do Screen.drawRectangle(70, 56, 442, 153);
        do Screen.setColor(false);
        // do Screen.drawRectangle(82, 68, 430, 141);
        do Screen.drawRectangle(72, 58, 440, 151);

        do Output.moveCursor(6, 11);
        do Output.printString("Welcome to my genetic algorithm simulation!");
        do Output.moveCursor(8, 10);
        do Output.printString("The objective is for dots to reach a goal in");
        do Output.moveCursor(9, 17);
        do Output.printString("as little steps as possible.");
        do Output.moveCursor(12, 20);
        do Output.printString("Press any key to start.");
        while (~(i > 0)) {
            do Util.random();
            let i = Keyboard.keyPressed();
        }
        let brainSize = 145;
        let populationCount = 60;
        let initialX = 10;
        let initialY = 128;
        let goalX = 500;
        let goalY = 128;
        let onlyBest = true;
        let obstacles = Array.new(512);
        while (~(i > 511)) {
            let obstacles[i] = false;
            let i = i + 1;
        }

        do Main.selectObstacles();

        do Brain.config(brainSize);
        do Dot.config(initialX, initialY, goalX, goalY, brainSize, obstacles);
        do Population.config(populationCount, brainSize, onlyBest);

        do Main.refreshDisplay();
        while (~false) {
            if (~Population.allDotsDead()) {
                do Population.update();
            } else {
                do Population.naturalSelection();
                do Main.refreshDisplay();
            }
        }
    }

    function void selectObstacles() {
        var int selectorX;
        var int selectorY;
        var int selectorIndex;
        var int key;
        var boolean drag;
        var boolean draggingEnter;

        let key = 1;
        while (~(key = 140)) {
            while (~(key > 0)) {
                let key = Keyboard.keyPressed();
            }

            do Screen.setColor(obstacles[selectorIndex]);
            do Screen.drawRectangle(selectorX, selectorY, selectorX + 15, selectorY + 15);
            do Screen.setColor(true);

            if (~(key = 130)) {
                if (~(key = 131)) {
                    if (~(key = 132)) {
                        if ((key = 133) & ~(selectorY = 240)) {
                            let selectorY = selectorY + 16;
                            let selectorIndex = selectorIndex + 32;
                        }
                    } else if (~(selectorX = 496)) {
                        let selectorX = selectorX + 16;
                        let selectorIndex = selectorIndex + 1;
                    }
                } else if (~(selectorY = 0)) {
                    let selectorY = selectorY - 16;
                    let selectorIndex = selectorIndex - 32;
                }
            } else if (~(selectorX = 0)) {
                let selectorX = selectorX - 16;
                let selectorIndex = selectorIndex - 1;
            }

            do Screen.drawRectangle(selectorX, selectorY, selectorX + 15, selectorY + 15);
            do Screen.setColor(false);
            do Screen.drawRectangle(selectorX + 1, selectorY + 1, selectorX + 14, selectorY + 14);
            do Screen.setColor(true);
            do Screen.drawRectangle(selectorX + 2, selectorY + 2, selectorX + 13, selectorY + 13);
            if ((key = 128) | (key = 129)) {
                let drag = ~(drag & (draggingEnter = (key = 128)));
                let draggingEnter = key = 128;
                while (~(key = 0)) {
                    let key = Keyboard.keyPressed();
                }
            }

            if (drag) {
                let obstacles[selectorIndex] = draggingEnter;
            }

            if (~(key = 140))
                let key = 0;

            do Sys.wait(175);
        }
        // ensure obstacles dont mess with memory allocation
        do Screen.clearScreen();
    }

    function void drawGoal() {
        do Screen.drawRectangle(goalX - 2, goalY - 2, goalX + 2, goalY + 2);
    }

    function void refreshDisplay() {
        var int i;
        var int obstacleY;
        var int obstacleX;
        do Main.drawGoal();
        while (~(i > 511)) {
            if (obstacles[i]) {
                let obstacleY = 0;
                let obstacleX = i;
                while (~(obstacleX < 32)) {
                    let obstacleX = obstacleX - 32;
                    let obstacleY = obstacleY + 16;
                }
                let obstacleX = i - (obstacleY + obstacleY);
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
                do Screen.drawRectangle(obstacleX, obstacleY, obstacleX + 15, obstacleY + 15);
            }
            let i = i + 1;
        }
        do Output.moveCursor(21, 0);
        do Output.printString(generationString);
        do Output.printInt(Population.getGen());
        do Output.println();
        do Output.printString(goalStepCountString);
        if (~(Dot.getMinStep() = 32767)) {
            do Output.printInt(Dot.getMinStep());
        } else {
            do Output.printString(NAString);
        }
    }
}