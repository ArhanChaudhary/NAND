class Main {
    static int brainSize;
    static int populationCount;
    static int initialX;
    static int initialY;
    static int goalX;
    static int goalY;
    static boolean onlyBest;
    static Array obstacles;

    function void main() {
        var int i;
        do Util.init();
        do AccelerationVector.init();
        do Population.init();

        let brainSize = 145;
        let populationCount = 60;
        let initialX = 10;
        let initialY = 128;
        let goalX = 500;
        let goalY = 128;
        let onlyBest = true;
        let obstacles = Array.new(512);
        while (~(i > 511)) {
            let obstacles[i] = false;
            let i = i + 1;
        }

        do Main.selectObstacles();

        do Brain.config(brainSize);
        do Dot.config(initialX, initialY, goalX, goalY, brainSize, obstacles);
        do Population.config(populationCount, brainSize, onlyBest);

        do Main.refreshDisplay();
        while (~false) {
            if (~Population.allDotsDead()) {
                do Population.update();
            } else {
                do Population.naturalSelection();
                do Main.refreshDisplay();
            }
        }
    }

    function void selectObstacles() {
        var int selectorX;
        var int selectorY;
        var int selectorIndex;
        var int key;
        var boolean drag;
        var boolean draggingEnter;

        do Screen.drawRectangle(selectorX, selectorY, selectorX + 15, selectorY + 15);
        while (~(key = 140)) {
            let key = 0;
            while (key = 0) {
                do Util.random();
                let key = Keyboard.keyPressed();
            }
            if (~obstacles[selectorIndex]) {
                do Screen.setColor(false);
                do Screen.drawRectangle(selectorX, selectorY, selectorX + 15, selectorY + 15);
                do Screen.setColor(true);
            }

            if (key = 130) {
                let selectorX = Math.max(0, selectorX - 16);
                let selectorIndex = selectorIndex - 1;
            } else if (key = 131) {
                let selectorY = Math.max(0, selectorY - 16);
                let selectorIndex = selectorIndex - 32;
            } else if (key = 132) {
                let selectorX = Math.min(496, selectorX + 16);
                let selectorIndex = selectorIndex + 1;
            } else if (key = 133) {
                let selectorY = Math.min(240, selectorY + 16);
                let selectorIndex = selectorIndex + 32;
            }

            do Screen.drawRectangle(selectorX, selectorY, selectorX + 15, selectorY + 15);
            if ((key = 128) | (key = 129)) {
                let drag = ~(drag & (draggingEnter = (key = 128)));
                let draggingEnter = key = 128;
                while (~(key = 0)) {
                    let key = Keyboard.keyPressed();
                }
            }

            if (drag) {
                let obstacles[selectorIndex] = draggingEnter;
            }

            do Sys.wait(175);
        }
    }

    function void refreshDisplay() {
        var int i;
        var int obstacleY;
        var int obstacleX;
        do Screen.drawRectangle(goalX - 2, goalY - 2, goalX + 2, goalY + 2);
        while (~(i > 511)) {
            if (obstacles[i]) {
                let obstacleY = 0;
                let obstacleX = i;
                while (~(obstacleX < 32)) {
                    let obstacleX = obstacleX - 32;
                    let obstacleY = obstacleY + 16;
                }
                let obstacleX = i - (obstacleY + obstacleY);
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
                do Screen.drawRectangle(obstacleX, obstacleY, obstacleX + 15, obstacleY + 15);
            }
            let i = i + 1;
        }
        do Output.moveCursor(21, 0);

        do Output.printChar(71);
        do Output.printChar(101);
        do Output.printChar(110);
        do Output.printChar(101);
        do Output.printChar(114);
        do Output.printChar(97);
        do Output.printChar(116);
        do Output.printChar(105);
        do Output.printChar(111);
        do Output.printChar(110);
        do Output.printChar(58);
        do Output.printChar(32);
        do Output.printInt(Population.getGen());

        do Output.moveCursor(22, 0);

        do Output.printChar(71);
        do Output.printChar(111);
        do Output.printChar(97);
        do Output.printChar(108);
        do Output.printChar(32);
        do Output.printChar(115);
        do Output.printChar(116);
        do Output.printChar(101);
        do Output.printChar(112);
        do Output.printChar(32);
        do Output.printChar(99);
        do Output.printChar(111);
        do Output.printChar(117);
        do Output.printChar(110);
        do Output.printChar(116);
        do Output.printChar(58);
        do Output.printChar(32);
        if (Dot.getMinStep() = 32767) {
            do Output.printChar(78);
            do Output.printChar(65);
        } else {
            do Output.printInt(Dot.getMinStep());
        }
    }
}