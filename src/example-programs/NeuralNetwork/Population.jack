class Population {
    static Array dots;
    static Array fitnessCache;
    static Array newBrainDirections;
    static int gen;
    static int size;
    static int brainSize;

    function void init() {
        let dots = null;
    }

    function void config(int _size, int _brainSize) {
        var int i;
        var Dot dot;
        var Array tmp;

        if (~(dots = null)) {
            while (i < size) {
                let dot = dots[i];
                do dot.dispose();
                let i = i + 1;
            }
            let i = 0;
            do dots.dispose();

            do fitnessCache.dispose();

            while (i < (size - 1)) {
                let tmp = newBrainDirections[i];
                if (~(tmp > 16384)) {
                    do tmp.dispose();
                    let i = i + 1;
                } else {
                    let i = size;
                }
            }
            let i = 0;
            do newBrainDirections.dispose();
            do Memory.deFrag();
        }

        let gen = 1;
        let size = _size;
        let brainSize = _brainSize;

        let dots = Array.new(size);
        while (i < size) {
            let dots[i] = Dot.new();
            let i = i + 1;
        }
        let i = 0;

        let fitnessCache = Array.new(size);

        // auxilliary memory
        let newBrainDirections = Array.new(size - 1);
        if (~(newBrainDirections < 16387)) {
            do Sys.error(3);
        }
        while (i < (size - 1)) {
            let newBrainDirections[i] = Array.new(brainSize);
            let i = i + 1;
        }
        do Screen.clearScreen();
    }

    function int getGen() {
        return gen;
    }

    function void update(boolean onlyBest) {
        var int i;
        var Dot dot;
        var Brain brain;
        if (~onlyBest) {
            while (i < size) {
                let dot = dots[i];
                let brain = dot.getBrain();
                do dot.update();
                do dot.show();
                let i = i + 1;
            }
        } else {
            while (i < size) {
                let dot = dots[i];
                let brain = dot.getBrain();
                do dot.update();
                let i = i + 1;
            }
            let dot = dots[0];
            do dot.show();
        }
    }

    function boolean allDotsDead() {
        var int i;
        var Dot dot;
        while (i < size) {
            let dot = dots[i];
            if (~dot.getDead())
                return false;
            let i = i + 1;
        }
        return true;
    }

    function void naturalSelection() {
        var Dot dot;
        var Dot bestDot;
        var Brain brain;
        var int dotFitness;
        var int bestFitness;
        var int i;
        var int j;
        var int selectionSum;
        var int selectionSumCoef;
        var int randFitness;
        var int randFitnessCoef;
        var int fitnessSum;
        var int fitnessSumCoef;
        var Array directions;
        var Array newDirections;
        var int scaleCache;

        let bestFitness = -1;
        while (i < size) {
            let dot = dots[i];
            let dotFitness = dot.calculateFitness();
            let fitnessCache[i] = dotFitness;
            if (dotFitness > bestFitness) {
                let bestFitness = dotFitness;
                let bestDot = dot;
            }
            let fitnessSum = fitnessSum + dotFitness;
            if (fitnessSum < 0) {
                let fitnessSum = fitnessSum + ~32767;
                let fitnessSumCoef = fitnessSumCoef + 1;
            }
            let i = i + 1;
        }

        if (bestDot.getReachedGoal()) {
            let brain = bestDot.getBrain();
            do Dot.setMinStep(brain.getStep());
        }

        let i = 0;
        while (i < (size - 1)) {
            let randFitness = Math.abs(Util.random());
            let randFitnessCoef = 32767;
            if (~(fitnessSumCoef = 0)) {
                let scaleCache = 32767 / fitnessSumCoef;
                while (randFitnessCoef > fitnessSumCoef) {
                    // fitnessSumCoef = 296, randFitnessCoef = 32698
                    // this results in randFitnessCoef = 297 which is out of bounds
                    let randFitnessCoef = Math.abs(Util.random()) / scaleCache;
                }
            } else {
                let randFitnessCoef = 0;
            }
            if (randFitnessCoef = fitnessSumCoef) {
                let scaleCache = 32767 / fitnessSum;
                while (~(randFitness < fitnessSum)) {
                    // same with this it can also go out of bounds
                    let randFitness = Math.abs(Util.random()) / scaleCache;
                }
            }
            let selectionSum = 0;
            let selectionSumCoef = 0;
            let j = 0;
            while (j < size) {
                let selectionSum = selectionSum + fitnessCache[j];
                if (selectionSum < 0) {
                    let selectionSum = selectionSum + ~32767;
                    let selectionSumCoef = selectionSumCoef + 1;
                }
                if ((selectionSumCoef > randFitnessCoef) | ((selectionSumCoef = randFitnessCoef) & (selectionSum > randFitness))) {
                    let dot = dots[j];
                    let j = size;
                }
                let j = j + 1;
            }
            let brain = dot.getBrain();
            let directions = brain.getDirections();
            let newDirections = newBrainDirections[i];
            let j = 0;
            while (j < brainSize) {
                if (~((Util.random() & 32256) = 0)) {
                    let newDirections[j] = directions[j];
                } else {
                    let newDirections[j] = AccelerationVector.random();
                }
                let j = j + 1;
            }
            let i = i + 1;
        }
        let i = 0;
        while (i < size) {
            let dot = dots[i];
            let brain = dot.getBrain();
            let directions = brain.getDirections();
            do dot.instantiate();
            do brain.instantiate();
            if (~(i = 0)) {
                let newDirections = newBrainDirections[i - 1];
            } else {
                let brain = bestDot.getBrain();
                let newDirections = brain.getDirections();
            }
            let j = 0;
            while (j < brainSize) {
                let directions[j] = newDirections[j];
                let j = j + 1;
            }
            let i = i + 1;
        }
        do Screen.clearScreen();
        let gen = gen + 1;
    }
}