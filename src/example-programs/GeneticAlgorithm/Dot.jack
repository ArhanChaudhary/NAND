class Dot {
    static int initialX, initialY;
    field int posX, posY;
    field int velX, velY;
    field AccelerationVectorPair acc;
    static int goalX, goalY;
    field int prevX, prevY;
    field Brain brain;
    field boolean dead;
    field boolean reachedGoal;
    static int stepWeight;
    static int brainSize;
    static int minStep;
    static Array obstacles;

    function void config(int _brainSize, Array _obstacles) {
        let brainSize = _brainSize;
        let obstacles = _obstacles;
        do Dot.resetMinStep();
    }

    function void setInitialPosition(int _initialX, int _initialY) {
        let initialX = _initialX;
        let initialY = _initialY;
    }

    function void setGoalPosition(int _goalX, int _goalY) {
        let goalX = _goalX;
        let goalY = _goalY;
    }

    function void resetMinStep() {
        let minStep = 32767;
        let stepWeight = 22767 / brainSize;
    }

    constructor Dot new() {
        let brain = Brain.new();
        do instantiate();
        return this;
    }

    method void instantiate() {
        let dead = false;
        let reachedGoal = false;
        let prevX = initialX;
        let prevY = initialY;

        let posX = initialX;
        let posY = initialY;
        let velX = 0;
        let velY = 0;
        let acc = null;
    }

    method boolean getDead() {
        return dead;
    }

    function int getMinStep() {
        return minStep;
    }

    function void setMinStep(int _minStep) {
        let minStep = _minStep;
    }

    method Brain getBrain() {
        return brain;
    }

    method void setBrain(Brain _brain) {
        let brain = _brain;
    }

    method boolean getReachedGoal() {
        return reachedGoal;
    }

    method void update(boolean andShow, boolean firstPairComponent) {
        var boolean newVelXIsNegative, newVelYIsNegative;
        if (brain.getStep() = minStep) {
            let dead = true;
        } else if (~dead) {
            if (brain.getStep() = brainSize) {
                let dead = true;
            } else if (firstPairComponent) {
                let acc = brain.getNextDirection();
            } else {
                do brain.incStep();
            }

            if (firstPairComponent) {
                let velX = velX + acc.getX();
                let velY = velY + acc.getY();
            } else {
                let velX = velX + acc.getX2();
                let velY = velY + acc.getY2();
            }

            let newVelXIsNegative = velX < 0;
            let newVelYIsNegative = velY < 0;

            if (newVelXIsNegative) {
                let velX = -velX;
            }

            if (newVelYIsNegative) {
                let velY = -velY;
            }

            // if (~(velX > 5)) {
            //     if (~(velX = 4)) {
            //         if (~(velX = 0)) {
            //             if (~(velY < 5)) {
            //                 let velY = 4;
            //             }
            //         } else if (~(velY < 6)) {
            //             let velY = 5;
            //         }
            //     } else if (~(velY < 4)) {
            //         let velY = 3;
            //     }
            // } else {
            //     let velX = 5;
            //     let velY = 0;
            // }
            if (velX > 5) {
                let velX = 5;
                let velY = 0;
            } else if (velX = 4) {
                if (velY > 3) {
                    let velY = 3;
                }
            } else if (velX = 0) {
                if (velY > 5) {
                    let velY = 5;
                }
            } else if (velY > 4) {
                let velY = 4;
            }

            if (newVelXIsNegative) {
                let velX = -velX;
            }

            if (newVelYIsNegative) {
                let velY = -velY;
            }

            let posX = posX + velX;
            let posY = posY + velY;

            if ((posX < 2) | (posY < 2) | (posX > 510) | (posY > 254) |
                (obstacles[Main.getGridIndex(posX, posY)] = true)) {
                let dead = true;
            } else {
                if (~((Math.abs(posX - goalX) > 3) |
                    (Math.abs(posY - goalY) > 3))) {
                    let reachedGoal = true;
                    let dead = true;
                }
                if (andShow) {
                    // needs to be here since calculateFitness uses
                    // prevX and prevY
                    do Screen.setColor(false);
                    do Screen.drawRectangle(
                        prevX - 1,
                        prevY - 1,
                        prevX + 1,
                        prevY + 1
                    );
                    do Screen.setColor(true);
                    let prevX = posX;
                    let prevY = posY;
                    do Screen.drawRectangle(
                        prevX - 1,
                        prevY - 1,
                        prevX + 1,
                        prevY + 1
                    );
                } else {
                    let prevX = posX;
                    let prevY = posY;
                }
            }
        }
    }

    method int calculateFitness() {
        if (reachedGoal) {
            return Math.max(10000, 32767 - (stepWeight * brain.getStep()));
        }
        // needed if goal is blocked off completely and the current grid index
        // hasnt been flooded (is 0) for example if this was 0 then during the
        // natural selection process no dot would be selected because everything
        // is 0 and it would all just evolve off of one random dot which makes
        // no sense it's also not easily possible to set it to 1 in flood itself
        // because of ROM concerns
        return Math.max(1, obstacles[Main.getGridIndex(prevX, prevY)]);
    }
}
