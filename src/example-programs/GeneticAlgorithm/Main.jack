class Main {
    static int initialX;
    static int initialY;
    static int goalX;
    static int goalY;
    static boolean onlyBest;
    static boolean isAdjacent;
    static Array obstacles;
    static Array floodQueue;
    static int floodQueueLength;
    static int floodDist;
    static boolean initialGoalDist;
    static boolean initialBestDotFitness;
    static boolean resetMinStep;
    static boolean precomputeFitnesses;

    static String generationString;
    static String goalStepCountString;
    static String goalDistanceString;
    static String NAString;
    static String obstaclesString;
    static String escapeString;
    static String dotString;
    static String goalString;
    static String precomputingString;
    static String optionOne;
    static String optionTwo;
    static String optionThree;
    static String optionFour;
    static String optionFourToggled;
    static String optionFive;
    static String optionSelect;

    function void init() {
        var int i;
        do Keyboard.init();
        let initialX = 256;
        let initialY = 127;
        let goalX = null;
        let generationString = "Generation: ";
        let goalStepCountString = "Goal step count: ";
        let goalDistanceString = "Goal distance: ";
        let NAString = "NA";
        let dotString = "Set the initial dot position with the arrow keys.";
        let goalString = "Set the goal position with the arrow keys.";
        let obstaclesString = "Place obstacles with the arrow, enter, and delete keys.";
        let escapeString = "Press escape to finish.";
        let precomputingString = "Precomputing fitnesses...";
        let optionOne = "1) Set initial dot position";
        let optionTwo = "2) Set goal position";
        let optionThree = "3) Set obstacles";
        let optionFour = "4) Show all dots";
        let optionFourToggled = "4) Show only best dot";
        let optionFive = "5) Continue";
        let optionSelect = "Select an option: ";
        let floodQueue = Array.new(100);
        let obstacles = Array.new(512);
        while (i < 512) {
            let obstacles[i] = 0;
            let i = i + 1;
        }
    }

    function void main() {
        var int brainSize;
        var boolean firstPairComponent;

        // do Screen.drawRectangle(81, 67, 433, 144);
        do Screen.drawRectangle(71, 57, 443, 154);
        do Screen.setColor(false);
        // do Screen.drawRectangle(83, 69, 431, 142);
        do Screen.drawRectangle(73, 59, 441, 152);
        do Output.moveCursor(6, 11);
        do Output.printString("Welcome to my genetic algorithm simulation!");
        do Output.moveCursor(8, 10);
        do Output.printString("The objective is for dots to reach a goal in");
        do Output.moveCursor(9, 17);
        do Output.printString("as little steps as possible.");
        do Output.moveCursor(12, 20);
        do Util.init();
        do AccelerationVectorPair.init();
        do Population.init();
        do Main.init();
        do Output.printString("Press any key to start.");
        while (Keyboard.keyPressed() = 0)
            do Util.random();
        do Screen.drawRectangle(71, 57, 443, 154);
        do Screen.setColor(true);

        let onlyBest = false;
        do Main.setInitialDotOrGoalPosition(true);
        let goalX = 257;
        let goalY = 127;
        do Main.setInitialDotOrGoalPosition(false);
        do Main.setObstacles();
        do Screen.clearScreen();
        do Main.precomputeFitnesses();
        // maximum amount of steps to move across a 16x16 grid square
        let brainSize = Math.max(initialGoalDist, 5);
        do Brain.config(brainSize);
        do Dot.config(brainSize, obstacles);
        do Population.config(brainSize, onlyBest, initialBestDotFitness);
        do Main.refreshDisplay();
        while (true) {
            if (Population.allDotsDead()) {
                do Population.naturalSelection();
                let precomputeFitnesses = false;
                let resetMinStep = false;
                if (Keyboard.keyPressed() = 140) {
                    do Main.showMenu();
                } else {
                    do Screen.clearScreen();
                }
                if (precomputeFitnesses) {
                    do Main.precomputeFitnesses();
                }
                do Main.refreshDisplay();
                if (resetMinStep) {
                    do Dot.resetMinStep();
                }
                let firstPairComponent = false;
            } else {
                let firstPairComponent = ~firstPairComponent;
                do Population.update(firstPairComponent);
            }
        }
    }

    function void setInitialDotOrGoalPosition(boolean setInitialDot) {
        var int key;
        var int prevPositionX;
        var int prevPositionY;
        var int positionX;
        var int positionY;
        var int boundX;
        var int boundY;
        var int moveDelay;

        var int sideLength;
        var int halfSideLength;

        if (setInitialDot) {
            let sideLength = 3;
            let halfSideLength = 1;
            let positionX = initialX;
            let positionY = initialY;
            let boundX = 508;
            let boundY = 253;
            let moveDelay = 30;
        } else {
            let sideLength = 5;
            let halfSideLength = 2;
            let positionX = goalX;
            let positionY = goalY;
            let boundX = 507;
            let boundY = 252;
            let moveDelay = 50;
        }

        let key = 1;
        while (~(key = 140)) {
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }
            // this if statement is here so it renders properly if an obstacle
            // is on the initial position
            if (~(prevPositionX = 0)) {
                do Main.drawObstacle(
                    Main.getGridIndex(
                        prevPositionX - halfSideLength,
                        prevPositionY - halfSideLength
                    )
                );
                do Main.drawObstacle(
                    Main.getGridIndex(
                        prevPositionX - halfSideLength,
                        prevPositionY + halfSideLength
                    )
                );
                do Main.drawObstacle(
                    Main.getGridIndex(
                        prevPositionX + halfSideLength,
                        prevPositionY - halfSideLength
                    )
                );
                do Main.drawObstacle(
                    Main.getGridIndex(
                        prevPositionX + halfSideLength,
                        prevPositionY + halfSideLength
                    )
                );
            }
            let prevPositionX = positionX;
            let prevPositionY = positionY;
            do Screen.setColor(false);
            do Screen.drawRectangle(
                prevPositionX - halfSideLength,
                prevPositionY - halfSideLength,
                prevPositionX + halfSideLength,
                prevPositionY + halfSideLength
            );
            do Screen.setColor(true);
            if (key = 130) {
                if (~(positionX = halfSideLength)) {
                    let positionX = positionX - sideLength;
                }
            } else if (key = 131) {
                if (~(positionY = halfSideLength)) {
                    let positionY = positionY - sideLength;
                }
            } else if (key = 132) {
                if (~(positionX = boundX)) {
                    let positionX = positionX + sideLength;
                }
            } else if (key = 133) {
                if (~(positionY = boundY)) {
                    let positionY = positionY + sideLength;
                }
            }
            do Screen.drawRectangle(
                positionX - halfSideLength,
                positionY - halfSideLength,
                positionX + halfSideLength,
                positionY + halfSideLength
            );
            if (key = 1) {
                if (setInitialDot) {
                    do Output.moveCursor(3, 8);
                    do Output.printString(dotString);
                } else {
                    do Output.moveCursor(3, 11);
                    do Output.printString(goalString);
                }
                do Output.moveCursor(4, 21);
                do Output.printString(escapeString);
                // wait for key release
                while (~(Keyboard.keyPressed() = 0)) {}
                // wait for key press then hide
                while (Keyboard.keyPressed() = 0) {}
                do Screen.setColor(false);
                do Screen.drawRectangle(17, 34, 489, 56);
                do Screen.setColor(true);
                do Main.drawObstacles();
            }
            if (~(key = 140)) {
                let key = 0;
                if (setInitialDot) {
                    if (~(goalX = null)) {
                        do Main.drawGoal();
                    }
                } else {
                    do Screen.drawRectangle(
                        initialX - 1,
                        initialY - 1,
                        initialX + 1,
                        initialY + 1
                    );
                }
                do Sys.wait(moveDelay);
            }
        }
        if (setInitialDot) {
            let initialX = positionX;
            let initialY = positionY;
            do Dot.setInitialPosition(initialX, initialY);
            if (~(goalX = null)) {
                do Population.instantiateDots();
            }
        } else {
            let goalX = positionX;
            let goalY = positionY;
            do Dot.setGoalPosition(goalX, goalY);
        }
    }

    function void setObstacles() {
        var int selectorX;
        var int selectorY;
        var int selectorIndex;
        var int key;
        var boolean drag;
        var boolean draggingEnter;

        do Output.moveCursor(3, 5);
        do Output.printString(obstaclesString);
        do Output.moveCursor(4, 22);
        do Output.printString(escapeString);
        let selectorX = 256;
        let selectorY = 112;
        let selectorIndex = 240;
        let key = 1;
        while (~(key = 140)) {
            while (key = 0) {
                let key = Keyboard.keyPressed();
            }

            do Screen.setColor(obstacles[selectorIndex] = -1);
            do Screen.drawRectangle(
                selectorX,
                selectorY,
                selectorX + 15,
                selectorY + 15
            );
            do Screen.setColor(true);

            if (~(key = 140)) {
                do Main.drawGoal();
                do Screen.drawRectangle(
                    initialX - 1,
                    initialY - 1,
                    initialX + 1,
                    initialY + 1
                );
                if (key = 130) {
                    if (~(selectorX = 0)) {
                        let selectorX = selectorX - 16;
                        let selectorIndex = selectorIndex - 1;
                    }
                } else if (key = 131) {
                    if (~(selectorY = 0)) {
                        let selectorY = selectorY - 16;
                        let selectorIndex = selectorIndex - 32;
                    }
                } else if (key = 132) {
                    if (~(selectorX = 496)) {
                        let selectorX = selectorX + 16;
                        let selectorIndex = selectorIndex + 1;
                    }
                } else if (key = 133) {
                    if (~(selectorY = 240)) {
                        let selectorY = selectorY + 16;
                        let selectorIndex = selectorIndex + 32;
                    }
                }
                do Screen.drawRectangle(
                    selectorX,
                    selectorY,
                    selectorX + 15,
                    selectorY + 15
                );
                do Screen.setColor(false);
                do Screen.drawRectangle(
                    selectorX + 1,
                    selectorY + 1,
                    selectorX + 14,
                    selectorY + 14
                );
                do Screen.setColor(true);
                do Screen.drawRectangle(
                    selectorX + 2,
                    selectorY + 2,
                    selectorX + 13,
                    selectorY + 13
                );
                if ((key = 128) | (key = 129)) {
                    let drag = ~(drag & (draggingEnter = (key = 128)));
                    let draggingEnter = key = 128;
                    while (~(key = 0)) {
                        let key = Keyboard.keyPressed();
                    }
                }

                if (drag) {
                    let obstacles[selectorIndex] = draggingEnter;
                }

                if (key = 1) {
                    // wait for key release
                    while (~(Keyboard.keyPressed() = 0)) {}
                    // wait for key press then hide
                    while (Keyboard.keyPressed() = 0) {}
                    do Screen.setColor(false);
                    do Screen.drawRectangle(40, 34, 480, 56);
                    do Screen.setColor(true);
                    do Main.drawObstacles();
                    let key = 2;
                } else {
                    let key = 0;
                }
                do Sys.wait(225);
            }
        }
    }

    function void precomputeFitnesses() {
        var boolean allowUp;
        var boolean allowDown;
        var boolean allowRight;
        var boolean allowLeft;
        var int i, i2;

        while (~(i > 511)) {
            if (~(obstacles[i] = -1))
                let obstacles[i] = 0;
            let i = i + 1;
        }

        do Output.moveCursor(11, 21);
        do Output.printString(precomputingString);

        let i = Main.getGridIndex(goalX, goalY);
        let floodQueue[0] = i;
        let floodQueueLength = 1;
        let obstacles[i] = 1;
        while (floodQueueLength > 0) {
            let i = floodQueue[0];
            let i2 = 1;
            while (~(i2 = floodQueueLength)) {
                let floodQueue[i2 - 1] = floodQueue[i2];
                let i2 = i2 + 1;
            }

            let floodQueueLength = floodQueueLength - 1;
            let floodDist = obstacles[i];
            let allowUp = i > 31;
            let allowDown = i < 480;
            let allowRight = ~((i & 31) = 31);
            let allowLeft = ~((i & 31) = 0);

            let isAdjacent = true;
            if (allowUp) {
                do Main.floodIndex(i, 1, 32);
            }

            if (allowRight) {
                do Main.floodIndex(i, 32, -1);
            }

            if (allowDown) {
                do Main.floodIndex(i, -1, -32);
            }

            if (allowLeft) {
                do Main.floodIndex(i, -32, 1);
            }

            let isAdjacent = false;
            if (allowUp) {
                if (allowRight) {
                    do Main.floodIndex(i - 31, -1, 32);
                }

                if (allowLeft) {
                    do Main.floodIndex(i - 33, 32, 1);
                }
            }

            if (allowDown) {
                if (allowRight) {
                    do Main.floodIndex(i + 33, -32, -1);
                }

                if (allowLeft) {
                    do Main.floodIndex(i + 31, 1, -32);
                }
            }
        }
        let i2 = Main.getGridIndex(initialX, initialY);
        let initialGoalDist = obstacles[i2];
        let i = 0;
        while (i < 512) {
            if (~((obstacles[i] = -1) | (obstacles[i] = 0))) {
                let obstacles[i] = Math.min(3276, 32767 / obstacles[i]);
                if (i = i2) {
                    let initialBestDotFitness = obstacles[i];
                }
            } else if (i = i2) {
                let initialGoalDist = 200;
                let initialBestDotFitness = 1;
            }
            let i = i + 1;
        }
        do Screen.setColor(false);
        do Screen.drawRectangle(168, 122, 368, 133);
        do Screen.setColor(true);
    }

    function void floodIndex(int i, int leftIndex, int rightIndex) {
        var int floodVal;
        var int penalty;
        var int topLeft;
        var int topRight;
        var int bottomLeft;
        var int bottomRight;

        if (isAdjacent) {
            let bottomLeft = i - leftIndex;
            let bottomRight = i + leftIndex;
            let topLeft = bottomLeft - rightIndex;
            let topRight = bottomRight - rightIndex;

            let penalty = Math.min(
                (Main.floodIndexOutOfBounds(i, bottomLeft) |
                (obstacles[bottomLeft] = -1)) +
                (Main.floodIndexOutOfBounds(i, bottomRight) |
                (obstacles[bottomRight] = -1)),
                (Main.floodIndexOutOfBounds(i, topLeft) |
                (obstacles[topLeft] = -1)) +
                (Main.floodIndexOutOfBounds(i, topRight) |
                (obstacles[topRight] = -1))
            );
            let i = i - rightIndex;
        } else {
            let rightIndex = Main.floodIndexOutOfBounds(i, i + rightIndex) |
                            (obstacles[i + rightIndex] = -1);
            let leftIndex = Main.floodIndexOutOfBounds(i, i + leftIndex) |
                            (obstacles[i + leftIndex] = -1);
            let penalty = leftIndex + rightIndex;
        }

        if (penalty = -2) {
            if (isAdjacent) {
                let floodVal = floodDist + 11;
            } else {
                let floodVal = floodDist + 65;
            }
        } else if (penalty = -1) {
            if (isAdjacent) {
                let floodVal = floodDist + 8;
            } else {
                // cant be ran because this will override the + 11 case
                return;
            }
        } else {
            if (isAdjacent) {
                let floodVal = floodDist + 5;
            } else {
                let floodVal = floodDist + 7;
            }
        }

        if ((obstacles[i] = 0) | (obstacles[i] > floodVal)) {
            let obstacles[i] = floodVal;
            let floodQueue[floodQueueLength] = i;
            let floodQueueLength = floodQueueLength + 1;
        }
    }

    function boolean floodIndexOutOfBounds(int originIndex, int newIndex) {
        return (newIndex < 0) | (newIndex > 511) |
                (((originIndex & 31) = 31) & ((newIndex & 31) = 0)) |
                (((originIndex & 31) = 0) & ((newIndex & 31) = 31));
    }

    function void drawGoal() {
        do Screen.drawRectangle(goalX - 2, goalY - 2, goalX + 2, goalY + 2);
    }

    function void drawObstacles() {
        var int i;
        while (i < 512) {
            do Main.drawObstacle(i);
            let i = i + 1;
        }
    }

    function void drawObstacle(int i) {
        var int obstacleY;
        var int obstacleX;
        if (obstacles[i] = -1) {
            let obstacleY = 0;
            let obstacleX = i;
            while (~(obstacleX < 32)) {
                let obstacleX = obstacleX - 32;
                let obstacleY = obstacleY + 16;
            }
            let obstacleX = i - (obstacleY + obstacleY);
            let obstacleX = obstacleX + obstacleX;
            let obstacleX = obstacleX + obstacleX;
            let obstacleX = obstacleX + obstacleX;
            let obstacleX = obstacleX + obstacleX;
            do Screen.drawRectangle(
                obstacleX,
                obstacleY,
                obstacleX + 15,
                obstacleY + 15
            );
        }
    }

    function void refreshDisplay() {
        var int bestDotFitness;
        var int minStep;
        do Main.drawGoal();
        do Main.drawObstacles();
        do Output.moveCursor(21, 0);
        do Output.printString(generationString);
        do Output.printInt(Population.getGen());
        do Output.println();
        let minStep = Dot.getMinStep();
        if (minStep = 32767) {
            do Output.printString(goalDistanceString);
            let bestDotFitness = Population.getBestDotFitness();
            if (bestDotFitness = 1) {
                do Output.printString(NAString);
            } else {
                do Output.printInt(32767 / bestDotFitness);
            }
        } else {
            do Output.printString(goalStepCountString);
            do Output.printInt(minStep);
        }
    }

    function int getGridIndex(int posX, int posY) {
        var int ret;
        while (~(posY < 16)) {
            let posY = posY - 16;
            let ret = ret + 32;
        }
        // ret should be (posY / 16) * 32

        while (~(posX < 16)) {
            let posX = posX - 16;
            let ret = ret + 1;
        }
        // ret should be (posY / 16) * 32 + (posX / 16)
        return ret;
    }

    function void showMenu() {
        var int selected;
        do Screen.clearScreen();
        // do Screen.drawRectangle(153, 78, 369, 155);
        do Screen.drawRectangle(143, 68, 379, 165);
        do Screen.setColor(false);
        // do Screen.drawRectangle(155, 80, 367, 153);
        do Screen.drawRectangle(145, 70, 377, 163);
        do Screen.setColor(true);
        do Output.moveCursor(7, 19);
        do Output.printString(optionOne);
        do Output.moveCursor(8, 19);
        do Output.printString(optionTwo);
        do Output.moveCursor(9, 19);
        do Output.printString(optionThree);
        do Output.moveCursor(10, 19);
        if (onlyBest) {
            do Output.printString(optionFour);
        } else {
            do Output.printString(optionFourToggled);
        }
        do Output.moveCursor(11, 19);
        do Output.printString(optionFive);
        do Output.moveCursor(13, 19);
        while (~(Keyboard.keyPressed() = 0)) {}
        let selected = Keyboard.readInt(optionSelect);
        // for GUIs and exit (so precomputeFitness/refreshDisplay runs with an
        // already cleared screen)
        if ((selected = 1) | (selected = 2) | (selected = 3) | (selected = 5)) {
            do Screen.setColor(false);
            do Screen.drawRectangle(143, 68, 379, 165);
            do Screen.setColor(true);
        }
        if (selected = 1) {
            do Main.setInitialDotOrGoalPosition(true);
            let resetMinStep = true;
        } else if (selected = 2) {
            do Main.setInitialDotOrGoalPosition(false);
            let precomputeFitnesses = true;
            let resetMinStep = true;
        } else if (selected = 3) {
            do Main.setObstacles();
            let precomputeFitnesses = true;
            let resetMinStep = true;
        } else if (selected = 4) {
            let onlyBest = ~onlyBest;
            do Population.toggleOnlyBest();
        }
        if (~(selected = 5)) {
            do Main.showMenu();
        }
    }
}
