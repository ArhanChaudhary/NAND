class Main {
    static int brainSize;
    static int populationCount;
    static int initialX;
    static int initialY;
    static int goalX;
    static int goalY;
    static boolean onlyBest;
    static Array obstacles;
    static Array floodQueue;
    static Array floodQueueStart;
    static int floodQueueLength;
    static int floodDist;

    static String generationString;
    static String goalStepCountString;
    static String NAString;
    static String placeString;
    static String loadingString;
    static String escString;

    function void init() {
        var int i;
        let generationString = "Generation: ";
        let goalStepCountString = "Goal step count: ";
        let NAString = "NA";
        let placeString = "Place obstacles with the arrow, enter, and delete keys.";
        let escString = "Press esc to finish.";
        let loadingString = "Loading...";
        let floodQueue = Array.new(512);
        let floodQueueStart = floodQueue;
        let obstacles = Array.new(512);
        while (~(i > 511)) {
            let obstacles[i] = false;
            let i = i + 1;
        }
    }

    function void main() {
        do Util.init();
        do AccelerationVector.init();
        do Population.init();
        do Main.init();

        // do Screen.drawRectangle(80, 67, 432, 144);
        do Screen.drawRectangle(70, 57, 442, 154);
        do Screen.setColor(false);
        // do Screen.drawRectangle(82, 69, 430, 142);
        do Screen.drawRectangle(72, 59, 440, 152);
        do Output.moveCursor(6, 11);
        do Output.printString("Welcome to my genetic algorithm simulation!");
        do Output.moveCursor(8, 10);
        do Output.printString("The objective is for dots to reach a goal in");
        do Output.moveCursor(9, 17);
        do Output.printString("as little steps as possible.");
        do Output.moveCursor(12, 20);
        do Output.printString("Press any key to start.");
        while (~(Keyboard.keyPressed() > 0))
            do Util.random();
        do Screen.drawRectangle(70, 57, 442, 154);

        let initialX = 10;
        let initialY = 128;
        let goalX = 500;
        let goalY = 128;
        let onlyBest = true;
        do Main.selectObstacles();
        do Screen.clearScreen();
        do Output.moveCursor(11, 28);
        do Output.printString(loadingString);

        let brainSize = 150;
        let populationCount = 56;
        do Brain.config(brainSize);
        do Dot.config(initialX, initialY, goalX, goalY, brainSize, obstacles);
        do Population.config(populationCount, brainSize, onlyBest);

        do Main.refreshDisplay();
        while (~false) {
            if (~Population.allDotsDead()) {
                do Population.update();
            } else {
                do Population.naturalSelection();
                if (Keyboard.keyPressed() = 140) {
                    do Main.selectObstacles();
                }
                do Main.refreshDisplay();
            }
        }
    }

    function void selectObstacles() {
        var int selectorX;
        var int selectorY;
        var int selectorIndex;
        var int key;
        var boolean drag;
        var boolean draggingEnter;
        var int i;

        while (~(i > 511)) {
            if (~(obstacles[i] = true))
                let obstacles[i] = false;
            let i = i + 1;
        }

        do Output.moveCursor(3, 5);
        do Output.printString(placeString);
        do Output.moveCursor(4, 22);
        do Output.printString(escString);
        let selectorX = 256;
        let selectorY = 112;
        let selectorIndex = 240;
        let key = 1;
        while (~(key = 140)) {
            while (~(key > 0)) {
                let key = Keyboard.keyPressed();
            }

            do Screen.setColor(obstacles[selectorIndex] = true);
            do Screen.drawRectangle(selectorX, selectorY, selectorX + 15, selectorY + 15);
            do Screen.setColor(true);

            if (~(key = 140)) {
                do Main.drawGoal();
                do Screen.drawRectangle(initialX - 1, initialY - 1, initialX + 1, initialY + 1);
                if (~(key = 130)) {
                    if (~(key = 131)) {
                        if (~(key = 132)) {
                            if (~((~(key = 133)) | (selectorY = 240))) {
                                let selectorY = selectorY + 16;
                                let selectorIndex = selectorIndex + 32;
                            }
                        } else if (~(selectorX = 496)) {
                            let selectorX = selectorX + 16;
                            let selectorIndex = selectorIndex + 1;
                        }
                    } else if (~(selectorY = 0)) {
                        let selectorY = selectorY - 16;
                        let selectorIndex = selectorIndex - 32;
                    }
                } else if (~(selectorX = 0)) {
                    let selectorX = selectorX - 16;
                    let selectorIndex = selectorIndex - 1;
                }

                do Screen.drawRectangle(selectorX, selectorY, selectorX + 15, selectorY + 15);
                do Screen.setColor(false);
                do Screen.drawRectangle(selectorX + 1, selectorY + 1, selectorX + 14, selectorY + 14);
                do Screen.setColor(true);
                do Screen.drawRectangle(selectorX + 2, selectorY + 2, selectorX + 13, selectorY + 13);
                if ((key = 128) | (key = 129)) {
                    let drag = ~(drag & (draggingEnter = (key = 128)));
                    let draggingEnter = key = 128;
                    while (~(key = 0)) {
                        let key = Keyboard.keyPressed();
                    }
                }

                if (drag) {
                    let obstacles[selectorIndex] = draggingEnter;
                }

                if (~(key = 1)) {
                    let key = 0;
                } else {
                    // wait for key release
                    while (~(Keyboard.keyPressed() = 0)) {}
                    // wait for key press then hide
                    while (~(Keyboard.keyPressed() > 0)) {}
                    do Screen.setColor(false);
                    do Screen.drawRectangle(40, 34, 480, 56);
                    do Screen.setColor(true);
                    do Main.drawObstacles();
                    let key = 2;
                }
                do Sys.wait(150);
            }
        }
        do Main.flood();
    }

    function void flood() {
        var int i;
        var boolean allowUp;
        var boolean allowDown;
        var boolean allowRight;
        var boolean allowLeft;
        var int initialFitness;
        let i = Main.getGridIndex(goalX, goalY);
        let floodQueue[0] = i;
        let floodQueueLength = 1;
        let obstacles[i] = 1;
        while (~(floodQueueLength < 1)) {
            let i = floodQueue[0];
            let floodQueue = floodQueue + 1;
            let floodQueueLength = floodQueueLength - 1;
            let floodDist = obstacles[i];
            let allowUp = i > 31;
            let allowDown = i < 480;
            let allowRight = ~((i & 31) = 31);
            let allowLeft = ~((i & 31) = 0);

            if (allowUp) {
                do Main.floodIndex(i - 32, true);
            }

            if (allowRight) {
                do Main.floodIndex(i + 1, true);
            }

            if (allowDown) {
                do Main.floodIndex(i + 32, true);
            }

            if (allowLeft) {
                do Main.floodIndex(i - 1, true);
            }

            if (allowUp) {
                if (allowRight) {
                    do Main.floodIndex(i - 31, false);
                }

                if (allowLeft) {
                    do Main.floodIndex(i - 33, false);
                }
            }

            if (allowDown) {
                if (allowRight) {
                    do Main.floodIndex(i + 33, false);
                }

                if (allowLeft) {
                    do Main.floodIndex(i + 31, false);
                }
            }
        }
        let floodQueue = floodQueueStart;
        let i = Main.getGridIndex(initialX, initialY);
        let initialFitness = obstacles[i];
        if (initialFitness = true) {
            let obstacles[i] = false;
        } else if (~(initialFitness = false)) {
            let initialFitness = 32767 / initialFitness;
            let i = 0;
            while (~(i > 511)) {
                if (~(obstacles[i] = true))
                    let obstacles[i] = Math.min(3276, Math.max(0, (32767 / obstacles[i]) - initialFitness));
                let i = i + 1;
            }
        }
    }

    function void floodIndex(int i, boolean adj) {
        if (obstacles[i] = false) {
            let obstacles[i] = floodDist + 7 + adj + adj;
            let floodQueue[floodQueueLength] = i;
            let floodQueueLength = floodQueueLength + 1;
        }
    }

    function void drawGoal() {
        do Screen.drawRectangle(goalX - 2, goalY - 2, goalX + 2, goalY + 2);
    }

    function void drawObstacles() {
        var int i;
        var int obstacleY;
        var int obstacleX;
        while (~(i > 511)) {
                let obstacleY = 0;
                let obstacleX = i;
                while (~(obstacleX < 32)) {
                    let obstacleX = obstacleX - 32;
                    let obstacleY = obstacleY + 16;
                }
                let obstacleX = i - (obstacleY + obstacleY);
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
                let obstacleX = obstacleX + obstacleX;
            if (obstacles[i] = true)
                do Screen.drawRectangle(obstacleX, obstacleY, obstacleX + 15, obstacleY + 15);
            let i = i + 1;
        }
    }

    function void refreshDisplay() {
        do Main.drawGoal();
        do Main.drawObstacles();
        do Output.moveCursor(21, 0);
        do Output.printString(generationString);
        do Output.printInt(Population.getGen());
        do Output.println();
        do Output.printString(goalStepCountString);
        if (~(Dot.getMinStep() = 32767)) {
            do Output.printInt(Dot.getMinStep());
        } else {
            do Output.printString(NAString);
        }
    }

    function int getGridIndex(int posX, int posY) {
        var int ret;
        while (~(posY < 16)) {
            let posY = posY - 16;
            let ret = ret + 32;
        }
        // ret should be (posY / 16) * 32

        while (~(posX < 16)) {
            let posX = posX - 16;
            let ret = ret + 1;
        }
        // ret should be (posY / 16) * 32 + (posX / 16)
        return ret;
    }
}