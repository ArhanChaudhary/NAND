// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ptr;

    /** Initializes the class. */
    function void init() {
        let ptr = 0;
        let ptr[2048] = 22526;
        let ptr[2049] = 24576;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ptr[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ptr[address] = value;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array segment;
        var int length;
        if (~(size > 0))
            do Sys.error(5);
        let segment = 2048;
        while (~false) {
            if (segment = 24576)
                do Sys.error(6);
            let length = segment[0];
            if (~(length < size)) {
                let size = size + 2;
                if (length > size) {
                    let segment[size] = length - size;
                    let segment[size + 1] = segment + length + 2;
                    let segment[1] = segment + size;
                }
                let segment[0] = 0;
                return segment + 2;
            }
            let segment = segment[1];
        }
        return 0;
    }

    // /** De-allocates the given object (cast as an array) by making
    //  *  it available for future allocations. */
    // leave it as defined so that the compiler doesn't complain
    function void deAlloc(Array o) {
    //     var Array segment;
    //     var Array nextSegment;
    //     let segment = o - 2;
    //     let nextSegment = segment[1];
    //     if (~(nextSegment[0] = 0)) {
    //         let segment[0] = (nextSegment - segment) + nextSegment[0];
    //         let segment[1] = nextSegment[1];
    //     } else {
    //         let segment[0] = (nextSegment - segment) - 2;
    //     }
    }

    // function void deFrag() {
    //     var Array segment;
    //     var Array nextSegment;
    //     let nextSegment = 2048;
    //     // screen memory
    //     while (~(nextSegment > 16382)) {
    //         if (~((nextSegment[0] = 0) | (segment[0] = 0))) {
    //             let segment[0] = (nextSegment - segment) + nextSegment[0];
    //             let segment[1] = nextSegment[1];
    //         } else {
    //             let segment = nextSegment;
    //         }
    //         let nextSegment = segment[1];
    //     }
    //     // assumes the next memory list (aka the screen) is completely free
    //     // and goes until the very end
    //     // ie segment[0] is the screen length and segment[1] is 24576
    //     // this assumption is necessary because theres no linked list
    //     // information present on the screen memory
    //     if (~(segment[0] = 0)) {
    //         let segment[0] = 24574 - segment;
    //         let segment[1] = 24576;
    //     }
    // }
}
