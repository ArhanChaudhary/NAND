class Population {
    static Array dots;
    static Array fitnessCache;
    static int bestDotFitness;
    static int dynamicMutationRateTimes32;
    static Array newBrainDirections;
    static int gen;
    static int populationCount;
    static int brainSize;
    static boolean onlyBest;
    static String allocatingString;

    function void init() {
        // let dots = null;
        let allocatingString = "Allocating dot memory...";
    }

    function void config(int _populationCount, int _brainSize, boolean _onlyBest, int initialBestDotFitness) {
        var int i;
        var Dot dot;
        var Array tmp;

        do Output.moveCursor(11, 22);
        do Output.printString(allocatingString);
        // if (~(dots = null)) {
        //     while (i < populationCount) {
        //         let dot = dots[i];
        //         do dot.dispose();
        //         let i = i + 1;
        //     }
        //     let i = 0;
        //     do dots.dispose();

        //     do fitnessCache.dispose();

        //     while (i < (populationCount - 1)) {
        //         let tmp = newBrainDirections[i];
        //         if (~(tmp > 16384)) {
        //             do tmp.dispose();
        //             let i = i + 1;
        //         } else {
        //             let i = populationCount;
        //         }
        //     }
        //     let i = 0;
        //     do newBrainDirections.dispose();
        //     do Memory.deFrag();
        // }

        let gen = 1;
        let populationCount = _populationCount;
        let brainSize = _brainSize;
        let onlyBest = _onlyBest;
        let bestDotFitness = initialBestDotFitness;
        let dynamicMutationRateTimes32 = Math.min(1000, 1530 / brainSize) * 32;

        let dots = Array.new(populationCount);
        while (i < populationCount) {
            let dots[i] = Dot.new();
            let i = i + 1;
        }
        let i = 0;

        let fitnessCache = Array.new(populationCount);

        // auxilliary memory
        let newBrainDirections = Array.new(populationCount - 1);
        if (~(newBrainDirections < 16387)) {
            do Sys.error(6);
        }
        do Screen.setColor(false);
        do Screen.drawRectangle(176, 122, 368, 133);
        do Screen.setColor(true);
        while (i < (populationCount - 1)) {
            let newBrainDirections[i] = Array.new(brainSize);
            let i = i + 1;
        }
        do Screen.clearScreen();
    }

    function int getGen() {
        return gen;
    }

    function int getBestDotFitness() {
        return bestDotFitness;
    }

    function void update(boolean firstPairComponent) {
        var int i;
        var Dot dot;
        while (i < populationCount) {
            let dot = dots[i];
            do dot.update((~onlyBest) | (i = 0), firstPairComponent);
            let i = i + 1;
        }
    }

    function boolean allDotsDead() {
        var int i;
        var Dot dot;
        while (i < populationCount) {
            let dot = dots[i];
            if (~dot.getDead())
                return false;
            let i = i + 1;
        }
        return true;
    }

    function void naturalSelection() {
        var Dot dot;
        var Dot bestDot;
        var Brain brain;
        var int dotFitness;
        var int i;
        var int j;
        var int selectionSum;
        var int selectionSumCoef;
        var int randFitness;
        var int randFitnessCoef;
        var int fitnessSum;
        var int fitnessSumCoef;
        var int randTo32000;
        var int randToBrainSize;
        var Array directions;
        var Array newDirections;
        var int scaleCache;
        var boolean mutated;

        let bestDotFitness = -1;
        while (i < populationCount) {
            let dot = dots[i];
            let dotFitness = dot.calculateFitness();
            let fitnessCache[i] = dotFitness;
            if (dotFitness > bestDotFitness) {
                let bestDotFitness = dotFitness;
                let bestDot = dot;
            }
            let fitnessSum = fitnessSum + dotFitness;
            if (fitnessSum < 0) {
                let fitnessSum = fitnessSum + ~32767;
                let fitnessSumCoef = fitnessSumCoef + 1;
            }
            let i = i + 1;
        }

        if (bestDot.getReachedGoal()) {
            let brain = bestDot.getBrain();
            do Dot.setMinStep(brain.getStep());
        }

        let i = 0;
        while (i < (populationCount - 1)) {
            if (fitnessSumCoef = 0) {
                let randFitnessCoef = 0;
            } else {
                let scaleCache = 32767 / fitnessSumCoef;
                let randFitnessCoef = 32767;
                while (randFitnessCoef > fitnessSumCoef) {
                    // fitnessSumCoef = 296, randFitnessCoef = 32698
                    // this results in randFitnessCoef = 297 which is out of bounds
                    let randFitnessCoef = Math.abs(Util.random()) / scaleCache;
                }
            }
            let randFitness = Math.abs(Util.random());
            if (randFitnessCoef = fitnessSumCoef) {
                if (fitnessSum = 0) {
                    let randFitness = 0;
                } else {
                    let scaleCache = 32767 / fitnessSum;
                    while (randFitness > fitnessSum) {
                        // same with this it can also go out of bounds
                        let randFitness = Math.abs(Util.random()) / scaleCache;
                    }
                }
            }
            let selectionSum = 0;
            let selectionSumCoef = 0;
            let j = 0;
            while (j < populationCount) {
                let selectionSum = selectionSum + fitnessCache[j];
                if (selectionSum < 0) {
                    let selectionSum = selectionSum + ~32767;
                    let selectionSumCoef = selectionSumCoef + 1;
                }
                if ((selectionSumCoef > randFitnessCoef) | ((selectionSumCoef = randFitnessCoef) & (selectionSum > randFitness))) {
                    let dot = dots[j];
                    let j = populationCount;
                }
                let j = j + 1;
            }
            let brain = dot.getBrain();
            let directions = brain.getDirections();
            let newDirections = newBrainDirections[i];
            let mutated = false;
            let j = 0;
            while (j < brainSize) {
                // scaleCache = 32767 / 1000 = 32
                let randTo32000 = 32000;
                while (~(randTo32000 < 32000)) {
                    let randTo32000 = Math.abs(Util.random());
                }
                if (randTo32000 < dynamicMutationRateTimes32) {
                    let newDirections[j] = AccelerationVectorPair.random();
                    let mutated = true;
                } else {
                    let newDirections[j] = directions[j];
                }
                let j = j + 1;
            }
            if (~mutated) {
                let scaleCache = 32767 / brainSize;
                let randToBrainSize = brainSize;
                // randToBrainSize can be negative Math.abs does not guarantee positive (-32768)
                while (~((randToBrainSize > -1) & (randToBrainSize < brainSize))) {
                    let randToBrainSize = Math.abs(Util.random()) / scaleCache;
                }
                let newDirections[randToBrainSize] = AccelerationVectorPair.random();
            }
            let i = i + 1;
        }
        let i = 0;
        while (i < populationCount) {
            let dot = dots[i];
            let brain = dot.getBrain();
            let directions = brain.getDirections();
            do dot.instantiate();
            do brain.instantiate();
            if (i = 0) {
                let brain = bestDot.getBrain();
                let newDirections = brain.getDirections();
            } else {
                let newDirections = newBrainDirections[i - 1];
            }
            let j = 0;
            while (j < brainSize) {
                let directions[j] = newDirections[j];
                let j = j + 1;
            }
            let i = i + 1;
        }
        do Screen.clearScreen();
        let gen = gen + 1;
    }
}