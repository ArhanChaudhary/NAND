/**
 * A program that exploits the fact that the runtime doesn't prevent stack
 * smashing, or overwriting the stack frame return address, to call
 * a function that would otherwise be inaccessible.
 *
 * Input the numbers 267 and 1715, see what happens!
 */
class Main {
    function void main() {
        var boolean authorized;
        do Output.printString("Good afternoon soldier.");
        do Output.println();
        do Output.println();
        do Output.printString("The general wants to make sure you have ");
        do Output.printString("clearance before we proceed with the briefing.");
        do Output.println();
        do Output.println();
        let authorized = Main.authorize();
        if (~authorized) {
            do Output.printString("Authorization request denied.");
        }
    }

    function boolean authorize() {
        var int loc;
        var int write;
        let loc = Keyboard.readInt("Enter your username: ");
        let write = Keyboard.readInt("Enter your password: ");
        do Output.println();
        do Memory.poke(loc, write);
        // Authorize sergeant, TODO
        return false;
    }

    function void nuclear_bomb() {
        do Output.printString("Welcome sergeant.");
        do Output.println();
        do Output.printString("The secret password is 'nandctf{h0w_4b0ut_a_n1");
        do Output.printString("c3_g4m3_0f_st4ck_sm4sh1ng}', but make sure not");
        do Output.printString(" to tell anyone!");
        do Sys.halt();
    }
}
