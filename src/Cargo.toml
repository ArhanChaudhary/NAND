[package]
name = "nand-core"
version = "0.1.0"
authors = ["Arhan Chaudhary <arhan.ch@gmail.com>"]
repository = "https://github.com/ArhanChaudhary/NAND"
edition = "2021"
description = "NAND's computer API"

[package.metadata.wasm-pack.profile.release]
wasm-opt = [
    #
    # optimization options
    #
    "-O4",
    "--inline-functions-with-loops",
    "--traps-never-happen",
    "--low-memory-unused",
    "--fast-math",
    "--no-validation",
    "--zero-filled-memory",
    "--always-inline-max-function-size",
    "200",
    "--flexible-inline-max-function-size",
    "4294967295",
    "--partial-inlining-ifs",
    "2147483647",

    #
    # features
    #
    "--enable-sign-ext",
    "--enable-threads",
    # "--enable-mutable-globals",
    # "--enable-nontrapping-float-to-int",
    "--enable-simd",
    "--enable-bulk-memory",
    # "--enable-exception-handling",
    # "--enable-tail-call", not enough support to use
    "--enable-reference-types",
    "--enable-multivalue",
    # "--enable-gc", no point
    # "--enable-memory64", not enough support to use
    # "--enable-relaxed-simd", not enough support to use
    # "--enable-extended-const", not enough support to use
    "--enable-strings",
    # "--enable-multimemory" # doesnt compile
    # "--enable-typed-continuations", # doesnt compile

    #
    # optimization passes
    #
    "--alignment-lowering",
    # "--asyncify",
    "--avoid-reinterprets",
    "--dae",
    "--dae-optimizing",
    # "--coalesce-locals",
    "--coalesce-locals-learning",
    "--code-pushing",
    "--code-folding",
    "--const-hoisting",
    "--cfp",
    "--dce",
    # "--dealign", breaks safari
    # "--denan",
    "--discard-global-effects",
    "--directize",
    # "--dfo",
    "--duplicate-import-elimination",
    "--duplicate-function-elimination",
    # "--emit-target-features",
    # "--extract-function-index",
    # "--flatten", # makes safari take up 100% cpu
    "--fpcast-emu", # maybe
    # "--func-metrics",
    # "--generate-dyncalls",    # maybe
    # "--generate-i64-dyncalls" # maybe
    "--generate-global-effects",
    "--generate-stack-ir",
    "--global-refining",
    "--gto",
    "--gsi",
    "--gufa",
    "--gufa-optimizing",
    "--type-refining",
    "--heap2local",
    "--inline-main",
    # "--inlining",
    "--inlining-optimizing",
    "--intrinsic-lowering",
    # "--jspi",
    # "--legalize-js-interface",
    # "--legalize-js-interface-minimally", # maybe
    "--local-cse",
    "--local-subtyping",
    # "--log-execution",
    # "--i64-to-i32-lowering",
    # "--instrument-locals", # maybe
    # "--instrument-memory", # maybe
    "--licm",
    # "--limit-segments",
    "--memory64-lowering",
    "--memory-packing",
    "--merge-blocks",
    "--merge-similar-functions",
    "--merge-locals",
    # "--metrics",
    "--minify-imports",
    # "--minify-imports-and-exports",
    # "--minify-imports-and-exports-and-modules",
    # "--mod-asyncify-always-and-only-unwind",
    # "--mod-asyncify-never-unwind",
    "--monomorphize",
    # "--monomorphize-always",
    "--multi-memory-lowering",
    # "--nm",
    # "--name-types",
    "--once-reduction",
    # "--optimize-added-constants",
    "--optimize-added-constants-propagate",
    "--optimize-casts",
    "--optimize-instructions",
    "--optimize-stack-ir",
    "--pick-load-signs",
    "--poppify",
    "--post-emscripten",
    "--optimize-for-js",
    # "--precompute",
    "--precompute-propagate",
    # "--symbolmap",
    # "--remove-non-js-ops",
    # "--remove-imports",
    # "--remove-memory",
    # "--remove-unused-brs",
    "--remove-unused-module-elements",
    "--remove-unused-nonfunction-module-elements",
    "--remove-unused-names",
    # "--remove-unused-types",
    "--reorder-functions",
    "--reorder-globals",
    "--reorder-locals",
    # "--rereloop",
    # "--rse",
    "--roundtrip",
    # "--safe-heap",
    # "--set-globals",
    "--signature-pruning",
    "--signature-refining",
    "--signext-lowering",
    # "--simplify-globals",
    "--simplify-globals-optimizing",
    # "--simplify-locals",
    "--simplify-locals-nonesting",
    # "--simplify-locals-notee",
    # "--simplify-locals-nostructure",
    "--simplify-locals-notee-nostructure",
    # "--souperify",
    # "--souperify-single-use",
    # "--spill-pointers",
    # "--stub-unsupported-js",
    # "--ssa",
    # "--ssa-nomerge",
    # "--stack-check",
    "--strip-producers",
    # "--strip-eh",
    "--strip-target-features",
    # "--trap-mode-clamp",
    # "--trap-mode-js",
    # "--type-merging",
    # "--type-ssa",
    # "--untee",
    "--vacuum",
]

[lib]
crate-type = ["cdylib", "rlib"]
path = "core/lib.rs"

[dependencies]
js-sys = "0.3.68"
serde = { version = "1.0.196", features = ["derive"] }
serde-wasm-bindgen = "0.6.3"
wasm-bindgen = "0.2.91"

[dependencies.web-sys]
version = "0.3.68"
features = ["Window", "Performance", "WorkerGlobalScope", "DedicatedWorkerGlobalScope", "OffscreenCanvas", "console"]

[profile.release]
panic = "abort"
codegen-units = 1
lto = "fat"
# NOTE: tests with opt-level 2 have around the same performance
# as with opt-level 3, so let's just use opt-level 3 for now.
